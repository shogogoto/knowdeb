import { toGraph } from ".";
import { fixtureDetail1 } from "../fixture";

/*
  グループ分けされた入れ子構造
    detail type
    logic type
    ref type

  どういうビューにするの？
  枝分かれしたスレを追いにくいtwitterみたいなのは回避したい

アウトライナーやドキュメントツリーのようなシンプルで読みやすいUIを目指す
Twitterのような煩雑なスレッド形式は避け、
ユーザーが一つの文脈に集中できるような体験を重視します。

1. ビューの構成
    デスクトップ: 画面をメインビューとサイドビューに分け、
      左側にメインビュー、右側にサイドビューを配置します。
    モバイル: メインビューを全画面で表示し、
      サイドビューは折りたたみ式またはオーバーレイ表示

main view と side viewは ContentLayoutとして外出ししたい

2. メインビューの詳細
    パンくずリスト:
      上部にパンくずリストを表示し、
      ユーザーが現在どの文脈にいるのかを常に把握できるようにします。
    現在のノード: 中央にユーザーが現在見ている文ノードを文カードとして強調表示
    関連ノードの表示:
      （詳細、ロジック、参照）**ごとにセクションを分けて表示します。
      in-comingとout-goingの同居:
        各エッジタイプセクション内に、
        **in-coming（前提）とout-going（派生）**を区別して表示します。
        これにより、特定の文脈における情報の前後関係を一度に把握できます。

3. サイドビューの詳細
    グラフビュー:
      現在のノード周辺のグラフ全体を「おまけ」として表示します。

    履歴とブックマーク:
      ユーザーが辿ったノードの履歴や、
      ブックマークしたノードの一覧を表示します。
      これにより、いつでも前の文脈に戻ったり、
      重要なノードに素早くアクセスしたりできます。

 */

describe("graph arrange", () => {
  it("toDisplayGraph", () => {
    const { g, knowdes } = fixtureDetail1;
    const G = toGraph(g);

    console.log({ G });
  });
});
