/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type { BearerResponse, UserRead } from "../fastAPI.schemas";

export const getAuthJwtLoginAuthJwtLoginPostResponseMock =
  (): BearerResponse => ({
    access_token:
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI",
    token_type: "bearer",
  });

export const getRegisterRegisterAuthRegisterPostResponseMock = (
  overrideResponse: Partial<UserRead> = {},
): UserRead => ({
  uid: faker.string.uuid(),
  email: faker.internet.email(),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  is_superuser: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  is_verified: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  display_name: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  profile: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  avatar_url: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  username: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.helpers.fromRegExp("^[a-zA-Z0-9_-]+$"),
      null,
    ]),
    undefined,
  ]),
  created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getVerifyVerifyAuthVerifyPostResponseMock = (
  overrideResponse: Partial<UserRead> = {},
): UserRead => ({
  uid: faker.string.uuid(),
  email: faker.internet.email(),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  is_superuser: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  is_verified: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  display_name: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  profile: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  avatar_url: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  username: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.helpers.fromRegExp("^[a-zA-Z0-9_-]+$"),
      null,
    ]),
    undefined,
  ]),
  created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getAuthJwtLoginAuthJwtLoginPostMockHandler = (
  overrideResponse?:
    | BearerResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<BearerResponse> | BearerResponse),
) => {
  return http.post("*/auth/jwt/login", async (info) => {
    await delay(200);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAuthJwtLoginAuthJwtLoginPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAuthJwtLogoutAuthJwtLogoutPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/auth/jwt/logout", async (info) => {
    await delay(200);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getAuthCookieLoginAuthCookieLoginPostMockHandler = (
  overrideResponse?:
    | unknown
    | undefined
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown | undefined> | unknown | undefined),
) => {
  return http.post("*/auth/cookie/login", async (info) => {
    await delay(200);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getAuthCookieLogoutAuthCookieLogoutPostMockHandler = (
  overrideResponse?:
    | unknown
    | undefined
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown | undefined> | unknown | undefined),
) => {
  return http.post("*/auth/cookie/logout", async (info) => {
    await delay(200);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getRegisterRegisterAuthRegisterPostMockHandler = (
  overrideResponse?:
    | UserRead
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserRead> | UserRead),
) => {
  return http.post("*/auth/register", async (info) => {
    await delay(200);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getRegisterRegisterAuthRegisterPostResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getResetForgotPasswordAuthForgotPasswordPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/auth/forgot-password", async (info) => {
    await delay(200);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 202 });
  });
};

export const getResetResetPasswordAuthResetPasswordPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/auth/reset-password", async (info) => {
    await delay(200);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getVerifyRequestTokenAuthRequestVerifyTokenPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/auth/request-verify-token", async (info) => {
    await delay(200);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 202 });
  });
};

export const getVerifyVerifyAuthVerifyPostMockHandler = (
  overrideResponse?:
    | UserRead
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserRead> | UserRead),
) => {
  return http.post("*/auth/verify", async (info) => {
    await delay(200);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getVerifyVerifyAuthVerifyPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getAuthMock = () => [
  getAuthJwtLoginAuthJwtLoginPostMockHandler(),
  getAuthJwtLogoutAuthJwtLogoutPostMockHandler(),
  getAuthCookieLoginAuthCookieLoginPostMockHandler(),
  getAuthCookieLogoutAuthCookieLogoutPostMockHandler(),
  getRegisterRegisterAuthRegisterPostMockHandler(),
  getResetForgotPasswordAuthForgotPasswordPostMockHandler(),
  getResetResetPasswordAuthResetPasswordPostMockHandler(),
  getVerifyRequestTokenAuthRequestVerifyTokenPostMockHandler(),
  getVerifyVerifyAuthVerifyPostMockHandler(),
];
