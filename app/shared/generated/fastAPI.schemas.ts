/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
/**
 * 成果スナップショット実行結果.
 */
export interface AchievementSnapshotResult {
  n_all_users: number;
  n_target: number;
  n_saved: number;
}

export type AdditionalWhen = string | null;

export type AdditionalWhere = string | null;

export type AdditionalBy = string | null;

/**
 * knowde付加情報.
 */
export interface Additional {
  when?: AdditionalWhen;
  where?: AdditionalWhere;
  by?: AdditionalBy;
}

export type BaseOAuthAccountExpiresAt = number | null;

export type BaseOAuthAccountRefreshToken = string | null;

/**
 * Base OAuth account model.
 */
export interface BaseOAuthAccount {
  id: unknown;
  oauth_name: string;
  access_token: string;
  expires_at?: BaseOAuthAccountExpiresAt;
  refresh_token?: BaseOAuthAccountRefreshToken;
  account_id: string;
  account_email: string;
}

export interface BearerResponse {
  access_token: string;
  token_type: string;
}

export type BodyAuthCookieLoginAuthCookieLoginPostGrantType = string | null;

export type BodyAuthCookieLoginAuthCookieLoginPostClientId = string | null;

export type BodyAuthCookieLoginAuthCookieLoginPostClientSecret = string | null;

export interface BodyAuthCookieLoginAuthCookieLoginPost {
  grant_type?: BodyAuthCookieLoginAuthCookieLoginPostGrantType;
  username: string;
  password: string;
  scope?: string;
  client_id?: BodyAuthCookieLoginAuthCookieLoginPostClientId;
  client_secret?: BodyAuthCookieLoginAuthCookieLoginPostClientSecret;
}

export type BodyAuthJwtLoginAuthJwtLoginPostGrantType = string | null;

export type BodyAuthJwtLoginAuthJwtLoginPostClientId = string | null;

export type BodyAuthJwtLoginAuthJwtLoginPostClientSecret = string | null;

export interface BodyAuthJwtLoginAuthJwtLoginPost {
  grant_type?: BodyAuthJwtLoginAuthJwtLoginPostGrantType;
  username: string;
  password: string;
  scope?: string;
  client_id?: BodyAuthJwtLoginAuthJwtLoginPostClientId;
  client_secret?: BodyAuthJwtLoginAuthJwtLoginPostClientSecret;
}

export interface BodyPostFilesResourcePost {
  files: Blob[];
}

export interface BodyPostTextResourceTextPost {
  txt: string;
  path: string[];
}

export interface BodyResetForgotPasswordAuthForgotPasswordPost {
  email: string;
}

export interface BodyResetResetPasswordAuthResetPasswordPost {
  token: string;
  password: string;
}

export interface BodyVerifyRequestTokenAuthRequestVerifyTokenPost {
  email: string;
}

export interface BodyVerifyVerifyAuthVerifyPost {
  token: string;
}

/**
 * for fastapi schema.
 */
export interface EdgeData {
  type: EdgeType;
  source: string;
  target: string;
  key: number;
}

/**
 * グラフ関係の種類.
 */
export type EdgeType = (typeof EdgeType)[keyof typeof EdgeType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EdgeType = {
  head: "head",
  sibling: "sibling",
  below: "below",
  def: "def",
  resolved: "resolved",
  quoterm: "quoterm",
  to: "to",
  example: "example",
  when: "when",
  where: "where",
  num: "num",
  by: "by",
  ref: "ref",
  anti: "anti",
  similar: "similar",
} as const;

export type EntryElementIdProperty = string | null;

/**
 * namespace用のhashableな表現.
 */
export interface Entry {
  name: string;
  element_id_property?: EntryElementIdProperty;
  uid: string;
}

export type ErrorModelDetailAnyOf = { [key: string]: string };

export type ErrorModelDetail = string | ErrorModelDetailAnyOf;

export interface ErrorModel {
  detail: ErrorModelDetail;
}

export type GraphDataGraph = { [key: string]: unknown };

export type GraphDataNodesItem = { [key: string]: string };

/**
 * for fastapi schema.
 */
export interface GraphData {
  directed: boolean;
  edges: EdgeData[];
  graph: GraphDataGraph;
  multigraph: boolean;
  nodes: GraphDataNodesItem[];
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type KStatsScore = number | null;

/**
 * 知識の関係統計.
 */
export interface KStats {
  /**
   * @minimum -100
   * @maximum 1000
   */
  n_detail: number;
  /**
   * @minimum -100
   * @maximum 1000
   */
  n_premise: number;
  /**
   * @minimum -100
   * @maximum 1000
   */
  n_conclusion: number;
  /**
   * @minimum -100
   * @maximum 1000
   */
  n_refer: number;
  /**
   * @minimum -100
   * @maximum 1000
   */
  n_referred: number;
  /**
   * @minimum -100
   * @maximum 1000
   */
  dist_axiom: number;
  /**
   * @minimum -100
   * @maximum 1000
   */
  dist_leaf: number;
  score?: KStatsScore;
}

export type KnowdeTerm = Term | null;

export type KnowdeAdditional = Additional | null;

/**
 * 知識の最小単位.
 */
export interface Knowde {
  sentence: string;
  uid: string;
  term?: KnowdeTerm;
  additional?: KnowdeAdditional;
  stats: KStats;
  resource_uid: string;
}

export type KnowdeDetailKnowdes = { [key: string]: Knowde };

/**
 * 詳細.
 */
export interface KnowdeDetail {
  uid: string;
  g: GraphData;
  knowdes: KnowdeDetailKnowdes;
  location: KnowdeLocation;
}

/**
 * knowdeの位置情報.
 */
export interface KnowdeLocation {
  user: UserReadPublic;
  folders: UidStr[];
  resource: MResource;
  headers: UidStr[];
  parents: Knowde[];
}

export type KnowdeSearchResultResourceInfos = { [key: string]: ResourceInfo };

/**
 * knowde検索結果.
 */
export interface KnowdeSearchResult {
  total: number;
  data: Knowde[];
  resource_infos: KnowdeSearchResultResourceInfos;
}

export type MResourceElementIdProperty = string | null;

export type MResourceAuthors = string[] | null;

export type MResourcePublished = string | null;

export type MResourceUrls = string[] | null;

export type MResourcePath = string[] | null;

export type MResourceUpdated = string | null;

export type MResourceTxtHash = number | null;

/**
 * LResourceのOGM, リソースのメタ情報.
 */
export interface MResource {
  name: string;
  element_id_property?: MResourceElementIdProperty;
  uid: string;
  authors?: MResourceAuthors;
  published?: MResourcePublished;
  urls?: MResourceUrls;
  path?: MResourcePath;
  updated?: MResourceUpdated;
  txt_hash?: MResourceTxtHash;
}

export type NameSpaceRoots = { [key: string]: Entry };

export type NameSpaceStats = { [key: string]: ResourceStats };

/**
 * リソースの分類.
 */
export interface NameSpace {
  g?: GraphData;
  roots_: NameSpaceRoots;
  user_id: string;
  stats?: NameSpaceStats;
}

export type Neo4jDateTime = string;

export interface OAuth2AuthorizeResponse {
  authorization_url: string;
}

/**
 * クエリのページング.
 */
export interface Paging {
  /** */
  page?: number;
  /** */
  size?: number;
}

/**
 * リソース詳細(API Return Type用).
 */
export interface ResourceDetail {
  network: SysNet;
  resource_info: ResourceInfo;
}

/**
 * リソースの所有者.
 */
export interface ResourceInfo {
  user: UserReadPublic;
  resource: MResource;
  resource_stats: ResourceStats;
}

export type ResourceMetaPublished = string | null;

export type ResourceMetaPath = string[] | null;

export type ResourceMetaTxtHash = number | null;

/**
 * リソースメタ情報.
 */
export interface ResourceMeta {
  title: string;
  authors?: string[];
  published?: ResourceMetaPublished;
  urls?: string[];
  path?: ResourceMetaPath;
  updated?: string;
  txt_hash?: ResourceMetaTxtHash;
}

/**
 * リクエスト用.
 */
export type ResourceMetas = ResourceMeta[];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResourceSearchBodyOrderByAnyOfItem = {
  title: "title",
  published: "published",
  updated: "updated",
  n_char: "n_char",
  n_sentence: "n_sentence",
  r_isolation: "r_isolation",
  r_axiom: "r_axiom",
  r_unrefered: "r_unrefered",
  average_degree: "average_degree",
  density: "density",
  diameter: "diameter",
  radius: "radius",
  username: "username",
  display_name: "display_name",
} as const;
export type ResourceSearchBodyOrderBy =
  | (typeof ResourceSearchBodyOrderByAnyOfItem)[keyof typeof ResourceSearchBodyOrderByAnyOfItem][]
  | null;

/**
 * リソース検索のPOST Body.
 */
export interface ResourceSearchBody {
  q?: string;
  q_user?: string;
  paging?: Paging;
  desc?: boolean;
  order_by?: ResourceSearchBodyOrderBy;
}

/**
 * リソース検索結果.
 */
export interface ResourceSearchResult {
  total: number;
  data?: ResourceInfo[];
}

/**
 * 辺の割合。高いほど、ノード同士が密に結合している
 * @nullable
 */
export type ResourceStatsDensity = number | null | null;

/**
 * 最大離心距離。ネットワーク内の最も遠いノード間の距離。低いほど、ネットワークがコンパクトで情報の伝達効率が高い。非連結のグラフの場合は、最大の強連結成分に対して計算
 * @nullable
 */
export type ResourceStatsDiameter = number | null | null;

/**
 * 各ノードからの最大距離の最小値。低いほど、中心的なノードから全体にアクセスしやすい。非連結のグラフの場合は、最大の強連結成分に対して計算
 * @nullable
 */
export type ResourceStatsRadius = number | null | null;

/**
 * グラフがいくつの独立した「島」に分かれているか。低いほど、知識が分断されていない
 * @nullable
 */
export type ResourceStatsNScc = number | null | null;

/**
 * 知識の量を示す指標 for API.
 */
export interface ResourceStats {
  /**
   * 辺の割合。高いほど、ノード同士が密に結合している
   * @nullable
   */
  density?: ResourceStatsDensity;
  /**
   * 最大離心距離。ネットワーク内の最も遠いノード間の距離。低いほど、ネットワークがコンパクトで情報の伝達効率が高い。非連結のグラフの場合は、最大の強連結成分に対して計算
   * @nullable
   */
  diameter?: ResourceStatsDiameter;
  /**
   * 各ノードからの最大距離の最小値。低いほど、中心的なノードから全体にアクセスしやすい。非連結のグラフの場合は、最大の強連結成分に対して計算
   * @nullable
   */
  radius?: ResourceStatsRadius;
  /**
   * グラフがいくつの独立した「島」に分かれているか。低いほど、知識が分断されていない
   * @nullable
   */
  n_scc?: ResourceStatsNScc;
  /** 一つの知識が平均していくつの他の知識と関連付いているか。高いほど、知識が密に関連し合う */
  average_degree: number;
  /** テキストの絶対的なボリューム */
  n_char: number;
  /** 知識の基本的な構成単位の数 */
  n_sentence: number;
  /** 語彙の規模 */
  n_term: number;
  /** 知識間の関係性の数 */
  n_edge: number;
  n_isolation: number;
  n_axiom: number;
  /** 他のどこからも参照されていない用語数 */
  n_unrefered: number;
  /** 低いほど、知識が相互に接続されている */
  readonly r_isolation: number;
  /** 低いほど、少数の原理から多くの知識が得られている */
  readonly r_axiom: number;
  /** 低いほど、定義された用語が無駄なく活用されている */
  readonly r_unrefered: number;
}

/**
 * 系ネットワーク.
 */
export interface SysNet {
  root: string;
  g?: GraphData;
}

/**
 * 参照用の無意味な記号(参照を持たない)
 */
export type TermAlias = string | null;

/**
 * 用語.
 */
export interface Term {
  names?: string[];
  /** 参照用の無意味な記号(参照を持たない) */
  alias?: TermAlias;
}

export type TrackUser = User | null;

/**
 * UUID付き文章.
 */
export interface UidStr {
  val: string;
  uid: string;
}

export type UserDisplayName = string | null;

export type UserProfile = string | null;

export type UserAvatarUrl = string | null;

/**
 * 半角英数字とハイフン、アンダースコアのみが使用できます。
 */
export type UserUsername = string | null;

/**
 * UserProtocol[UUID]を満たす.
 */
export interface User {
  oauth_accounts?: BaseOAuthAccount[];
  display_name?: UserDisplayName;
  profile?: UserProfile;
  avatar_url?: UserAvatarUrl;
  /** 半角英数字とハイフン、アンダースコアのみが使用できます。 */
  username?: UserUsername;
  uid: string;
  email: string;
  hashed_password: string;
  is_active: boolean;
  is_superuser: boolean;
  is_verified: boolean;
  created: Neo4jDateTime;
}

/**
 * ユーザーの作業量計.
 */
export interface UserAchievement {
  n_char: number;
  n_sentence: number;
  n_resource: number;
  created: Neo4jDateTime;
}

export type UserActivityRequestUserIdsItem = string | string;

export interface UserActivityRequest {
  user_ids: UserActivityRequestUserIdsItem[];
}

export type UserCreateIsActive = boolean | null;

export type UserCreateIsSuperuser = boolean | null;

export type UserCreateIsVerified = boolean | null;

/**
 * 作成.
 */
export interface UserCreate {
  email: string;
  /**
   * 3文字以上100文字以内で入力してください
   * @minLength 3
   * @maxLength 100
   */
  password: string;
  is_active?: UserCreateIsActive;
  is_superuser?: UserCreateIsSuperuser;
  is_verified?: UserCreateIsVerified;
}

export type UserReadDisplayName = string | null;

export type UserReadProfile = string | null;

export type UserReadAvatarUrl = string | null;

/**
 * 半角英数字とハイフン、アンダースコアのみが使用できます。
 */
export type UserReadUsername = string | null;

/**
 * 読み取り.
 */
export interface UserRead {
  uid: string;
  email: string;
  is_active?: boolean;
  is_superuser?: boolean;
  is_verified?: boolean;
  display_name?: UserReadDisplayName;
  profile?: UserReadProfile;
  avatar_url?: UserReadAvatarUrl;
  /** 半角英数字とハイフン、アンダースコアのみが使用できます。 */
  username?: UserReadUsername;
  created: Neo4jDateTime;
}

export type UserReadPublicDisplayName = string | null;

export type UserReadPublicProfile = string | null;

export type UserReadPublicAvatarUrl = string | null;

/**
 * 半角英数字とハイフン、アンダースコアのみが使用できます。
 */
export type UserReadPublicUsername = string | null;

/**
 * 公開ユーザー情報.
 */
export interface UserReadPublic {
  display_name?: UserReadPublicDisplayName;
  profile?: UserReadPublicProfile;
  avatar_url?: UserReadPublicAvatarUrl;
  /** 半角英数字とハイフン、アンダースコアのみが使用できます。 */
  username?: UserReadPublicUsername;
  uid: string;
  created: Neo4jDateTime;
}

export type UserSearchBodyOrderByAnyOfItem =
  (typeof UserSearchBodyOrderByAnyOfItem)[keyof typeof UserSearchBodyOrderByAnyOfItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSearchBodyOrderByAnyOfItem = {
  username: "username",
  display_name: "display_name",
  n_char: "n_char",
  n_sentence: "n_sentence",
  n_resource: "n_resource",
} as const;

export type UserSearchBodyOrderBy = UserSearchBodyOrderByAnyOfItem[] | null;

/**
 * ユーザー検索パラメータ.
 */
export interface UserSearchBody {
  q?: string;
  paging?: Paging;
  desc?: boolean;
  order_by?: UserSearchBodyOrderBy;
}

/**
 * 検索結果.
 */
export interface UserSearchResult {
  total: number;
  data: UserSearchRow[];
}

/**
 * 検索結果行.
 */
export interface UserSearchRow {
  user: UserReadPublic;
  archivement: UserAchievement;
}

/**
 * 3文字以上100文字以内で入力してください
 * @nullable
 */
export type UserUpdatePassword = string | null | null;

export type UserUpdateEmail = string | null;

export type UserUpdateIsActive = boolean | null;

export type UserUpdateIsSuperuser = boolean | null;

export type UserUpdateIsVerified = boolean | null;

export type UserUpdateDisplayName = string | null;

export type UserUpdateProfile = string | null;

export type UserUpdateAvatarUrl = string | null;

/**
 * 半角英数字とハイフン、アンダースコアのみが使用できます。
 */
export type UserUpdateUsername = string | null;

/**
 * 更新.
 */
export interface UserUpdate {
  /**
   * 3文字以上100文字以内で入力してください
   * @nullable
   */
  password?: UserUpdatePassword;
  email?: UserUpdateEmail;
  is_active?: UserUpdateIsActive;
  is_superuser?: UserUpdateIsSuperuser;
  is_verified?: UserUpdateIsVerified;
  display_name?: UserUpdateDisplayName;
  profile?: UserUpdateProfile;
  avatar_url?: UserUpdateAvatarUrl;
  /** 半角英数字とハイフン、アンダースコアのみが使用できます。 */
  username?: UserUpdateUsername;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type OauthGoogleJwtAuthorizeGoogleAuthorizeGetParams = {
  scopes?: string[];
};

export type OauthGoogleJwtCallbackGoogleCallbackGetParams = {
  code?: string | null;
  code_verifier?: string | null;
  state?: string | null;
  error?: string | null;
};

export type OauthGoogleCookieAuthorizeGoogleCookieAuthorizeGetParams = {
  scopes?: string[];
};

export type OauthGoogleCookieCallbackGoogleCookieCallbackGetParams = {
  code?: string | null;
  code_verifier?: string | null;
  state?: string | null;
  error?: string | null;
};

export type UserProfileUserProfileUsernameGetParams = {
  user?: TrackUser;
};

export type SearchUserUserSearchPostParams = {
  user?: TrackUser;
};

export type SaveUserAchievementUserAchievementBatchGetParams = {
  page?: number;
  size?: number;
};

export type PostTextResourceTextPost200 = { [key: string]: string };

export type SearchResourcePostResourceSearchPostParams = {
  user?: TrackUser;
};

export type SearchByTextKnowdeGetParams = {
  user?: TrackUser;
  q?: string;
  type?: SearchByTextKnowdeGetType;
  page?: number;
  size?: number;
  n_detail?: number;
  n_premise?: number;
  n_conclusion?: number;
  n_refer?: number;
  n_referred?: number;
  dist_axiom?: number;
  dist_leaf?: number;
  desc?: boolean;
};

export type SearchByTextKnowdeGetType =
  (typeof SearchByTextKnowdeGetType)[keyof typeof SearchByTextKnowdeGetType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchByTextKnowdeGetType = {
  CONTAINS: "CONTAINS",
  STARTS_WITH: "STARTS_WITH",
  ENDS_WITH: "ENDS_WITH",
  REGEX: "REGEX",
  EQUAL: "EQUAL",
} as const;

export type DetailKnowdeSentenceSentenceIdGetParams = {
  user?: TrackUser;
};
