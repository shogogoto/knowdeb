/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * Ë™çË®º„Å™„Åó„É¶„Éº„Ç∂„ÉºÊ§úÁ¥¢.
 * @summary Search User
 */
export const searchUserUserSearchGetQueryDisplayNameDefault = "";
export const searchUserUserSearchGetQueryIdDefault = "";
export const searchUserUserSearchGetQueryUserOauthAccountsDefault = [];
export const searchUserUserSearchGetQueryUserDisplayNameMaxOne = 32;
export const searchUserUserSearchGetQueryUserProfileMaxOne = 160;
export const searchUserUserSearchGetQueryUserUsernameMaxOne = 16;
export const searchUserUserSearchGetQueryUserUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;

export const searchUserUserSearchGetQueryParams = zod.object({
  display_name: zod.string().optional(),
  id: zod.string().optional(),
  user: zod
    .object({
      oauth_accounts: zod
        .array(
          zod
            .object({
              id: zod.any(),
              oauth_name: zod.string(),
              access_token: zod.string(),
              expires_at: zod.number().or(zod.null()).optional(),
              refresh_token: zod.string().or(zod.null()).optional(),
              account_id: zod.string(),
              account_email: zod.string(),
            })
            .describe("Base OAuth account model."),
        )
        .default(searchUserUserSearchGetQueryUserOauthAccountsDefault),
      display_name: zod
        .string()
        .max(searchUserUserSearchGetQueryUserDisplayNameMaxOne)
        .or(zod.null())
        .optional(),
      profile: zod
        .string()
        .max(searchUserUserSearchGetQueryUserProfileMaxOne)
        .or(zod.null())
        .optional(),
      avatar_url: zod.string().or(zod.null()).optional(),
      username: zod
        .string()
        .max(searchUserUserSearchGetQueryUserUsernameMaxOne)
        .regex(searchUserUserSearchGetQueryUserUsernameRegExpOne)
        .or(zod.null())
        .optional()
        .describe("ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ"),
      uid: zod.string().uuid(),
      email: zod.string().email(),
      hashed_password: zod.string(),
      is_active: zod.boolean(),
      is_superuser: zod.boolean(),
      is_verified: zod.boolean(),
      created: zod.string().datetime({}),
    })
    .describe("UserProtocol[UUID]„ÇíÊ∫Ä„Åü„Åô.")
    .or(zod.null())
    .optional(),
});

export const searchUserUserSearchGetResponseDisplayNameMaxOne = 32;
export const searchUserUserSearchGetResponseProfileMaxOne = 160;
export const searchUserUserSearchGetResponseUsernameMaxOne = 16;
export const searchUserUserSearchGetResponseUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;

export const searchUserUserSearchGetResponseItem = zod
  .object({
    display_name: zod
      .string()
      .max(searchUserUserSearchGetResponseDisplayNameMaxOne)
      .or(zod.null())
      .optional(),
    profile: zod
      .string()
      .max(searchUserUserSearchGetResponseProfileMaxOne)
      .or(zod.null())
      .optional(),
    avatar_url: zod.string().or(zod.null()).optional(),
    username: zod
      .string()
      .max(searchUserUserSearchGetResponseUsernameMaxOne)
      .regex(searchUserUserSearchGetResponseUsernameRegExpOne)
      .or(zod.null())
      .optional()
      .describe("ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ"),
    uid: zod.string().uuid(),
    created: zod.string().datetime({}),
  })
  .describe("ÂÖ¨Èñã„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±.");
export const searchUserUserSearchGetResponse = zod.array(
  searchUserUserSearchGetResponseItem,
);

/**
 * ÂÖ¨Èñã„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±.
 * @summary User Profile
 */
export const userProfileUserProfileUsernameGetParams = zod.object({
  username: zod.string(),
});

export const userProfileUserProfileUsernameGetQueryUserOauthAccountsDefault =
  [];
export const userProfileUserProfileUsernameGetQueryUserDisplayNameMaxOne = 32;
export const userProfileUserProfileUsernameGetQueryUserProfileMaxOne = 160;
export const userProfileUserProfileUsernameGetQueryUserUsernameMaxOne = 16;
export const userProfileUserProfileUsernameGetQueryUserUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;

export const userProfileUserProfileUsernameGetQueryParams = zod.object({
  user: zod
    .object({
      oauth_accounts: zod
        .array(
          zod
            .object({
              id: zod.any(),
              oauth_name: zod.string(),
              access_token: zod.string(),
              expires_at: zod.number().or(zod.null()).optional(),
              refresh_token: zod.string().or(zod.null()).optional(),
              account_id: zod.string(),
              account_email: zod.string(),
            })
            .describe("Base OAuth account model."),
        )
        .default(
          userProfileUserProfileUsernameGetQueryUserOauthAccountsDefault,
        ),
      display_name: zod
        .string()
        .max(userProfileUserProfileUsernameGetQueryUserDisplayNameMaxOne)
        .or(zod.null())
        .optional(),
      profile: zod
        .string()
        .max(userProfileUserProfileUsernameGetQueryUserProfileMaxOne)
        .or(zod.null())
        .optional(),
      avatar_url: zod.string().or(zod.null()).optional(),
      username: zod
        .string()
        .max(userProfileUserProfileUsernameGetQueryUserUsernameMaxOne)
        .regex(userProfileUserProfileUsernameGetQueryUserUsernameRegExpOne)
        .or(zod.null())
        .optional()
        .describe("ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ"),
      uid: zod.string().uuid(),
      email: zod.string().email(),
      hashed_password: zod.string(),
      is_active: zod.boolean(),
      is_superuser: zod.boolean(),
      is_verified: zod.boolean(),
      created: zod.string().datetime({}),
    })
    .describe("UserProtocol[UUID]„ÇíÊ∫Ä„Åü„Åô.")
    .or(zod.null())
    .optional(),
});

export const userProfileUserProfileUsernameGetResponseDisplayNameMaxOne = 32;
export const userProfileUserProfileUsernameGetResponseProfileMaxOne = 160;
export const userProfileUserProfileUsernameGetResponseUsernameMaxOne = 16;
export const userProfileUserProfileUsernameGetResponseUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;

export const userProfileUserProfileUsernameGetResponse = zod
  .object({
    display_name: zod
      .string()
      .max(userProfileUserProfileUsernameGetResponseDisplayNameMaxOne)
      .or(zod.null())
      .optional(),
    profile: zod
      .string()
      .max(userProfileUserProfileUsernameGetResponseProfileMaxOne)
      .or(zod.null())
      .optional(),
    avatar_url: zod.string().or(zod.null()).optional(),
    username: zod
      .string()
      .max(userProfileUserProfileUsernameGetResponseUsernameMaxOne)
      .regex(userProfileUserProfileUsernameGetResponseUsernameRegExpOne)
      .or(zod.null())
      .optional()
      .describe("ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ"),
    uid: zod.string().uuid(),
    created: zod.string().datetime({}),
  })
  .describe("ÂÖ¨Èñã„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±.");
