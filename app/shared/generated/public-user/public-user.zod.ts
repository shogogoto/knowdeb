/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * ÂÖ¨Èñã„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±.
 * @summary User Profile
 */
export const userProfileUserProfileUsernameGetParams = zod.object({
  username: zod.string(),
});

export const userProfileUserProfileUsernameGetQueryUserOauthAccountsDefault =
  [];
export const userProfileUserProfileUsernameGetQueryUserDisplayNameMaxOne = 32;
export const userProfileUserProfileUsernameGetQueryUserProfileMaxOne = 160;
export const userProfileUserProfileUsernameGetQueryUserUsernameMaxOne = 16;
export const userProfileUserProfileUsernameGetQueryUserUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;

export const userProfileUserProfileUsernameGetQueryParams = zod.object({
  user: zod
    .object({
      oauth_accounts: zod
        .array(
          zod
            .object({
              id: zod.any(),
              oauth_name: zod.string(),
              access_token: zod.string(),
              expires_at: zod.number().or(zod.null()).optional(),
              refresh_token: zod.string().or(zod.null()).optional(),
              account_id: zod.string(),
              account_email: zod.string(),
            })
            .describe("Base OAuth account model."),
        )
        .default(
          userProfileUserProfileUsernameGetQueryUserOauthAccountsDefault,
        ),
      display_name: zod
        .string()
        .max(userProfileUserProfileUsernameGetQueryUserDisplayNameMaxOne)
        .or(zod.null())
        .optional(),
      profile: zod
        .string()
        .max(userProfileUserProfileUsernameGetQueryUserProfileMaxOne)
        .or(zod.null())
        .optional(),
      avatar_url: zod.string().or(zod.null()).optional(),
      username: zod
        .string()
        .max(userProfileUserProfileUsernameGetQueryUserUsernameMaxOne)
        .regex(userProfileUserProfileUsernameGetQueryUserUsernameRegExpOne)
        .or(zod.null())
        .optional()
        .describe("ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ"),
      uid: zod.string().uuid(),
      email: zod.string().email(),
      hashed_password: zod.string(),
      is_active: zod.boolean(),
      is_superuser: zod.boolean(),
      is_verified: zod.boolean(),
      created: zod.string().datetime({}),
    })
    .describe("UserProtocol[UUID]„ÇíÊ∫Ä„Åü„Åô.")
    .or(zod.null())
    .optional(),
});

export const userProfileUserProfileUsernameGetResponseDisplayNameMaxOne = 32;
export const userProfileUserProfileUsernameGetResponseProfileMaxOne = 160;
export const userProfileUserProfileUsernameGetResponseUsernameMaxOne = 16;
export const userProfileUserProfileUsernameGetResponseUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;

export const userProfileUserProfileUsernameGetResponse = zod
  .object({
    display_name: zod
      .string()
      .max(userProfileUserProfileUsernameGetResponseDisplayNameMaxOne)
      .or(zod.null())
      .optional(),
    profile: zod
      .string()
      .max(userProfileUserProfileUsernameGetResponseProfileMaxOne)
      .or(zod.null())
      .optional(),
    avatar_url: zod.string().or(zod.null()).optional(),
    username: zod
      .string()
      .max(userProfileUserProfileUsernameGetResponseUsernameMaxOne)
      .regex(userProfileUserProfileUsernameGetResponseUsernameRegExpOne)
      .or(zod.null())
      .optional()
      .describe("ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ"),
    uid: zod.string().uuid(),
    created: zod.string().datetime({}),
  })
  .describe("ÂÖ¨Èñã„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±.");

/**
 * Ë™çË®º„Å™„Åó„É¶„Éº„Ç∂„ÉºÊ§úÁ¥¢.
 * @summary Search User
 */
export const searchUserUserSearchPostQueryUserOauthAccountsDefault = [];
export const searchUserUserSearchPostQueryUserDisplayNameMaxOne = 32;
export const searchUserUserSearchPostQueryUserProfileMaxOne = 160;
export const searchUserUserSearchPostQueryUserUsernameMaxOne = 16;
export const searchUserUserSearchPostQueryUserUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;

export const searchUserUserSearchPostQueryParams = zod.object({
  user: zod
    .object({
      oauth_accounts: zod
        .array(
          zod
            .object({
              id: zod.any(),
              oauth_name: zod.string(),
              access_token: zod.string(),
              expires_at: zod.number().or(zod.null()).optional(),
              refresh_token: zod.string().or(zod.null()).optional(),
              account_id: zod.string(),
              account_email: zod.string(),
            })
            .describe("Base OAuth account model."),
        )
        .default(searchUserUserSearchPostQueryUserOauthAccountsDefault),
      display_name: zod
        .string()
        .max(searchUserUserSearchPostQueryUserDisplayNameMaxOne)
        .or(zod.null())
        .optional(),
      profile: zod
        .string()
        .max(searchUserUserSearchPostQueryUserProfileMaxOne)
        .or(zod.null())
        .optional(),
      avatar_url: zod.string().or(zod.null()).optional(),
      username: zod
        .string()
        .max(searchUserUserSearchPostQueryUserUsernameMaxOne)
        .regex(searchUserUserSearchPostQueryUserUsernameRegExpOne)
        .or(zod.null())
        .optional()
        .describe("ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ"),
      uid: zod.string().uuid(),
      email: zod.string().email(),
      hashed_password: zod.string(),
      is_active: zod.boolean(),
      is_superuser: zod.boolean(),
      is_verified: zod.boolean(),
      created: zod.string().datetime({}),
    })
    .describe("UserProtocol[UUID]„ÇíÊ∫Ä„Åü„Åô.")
    .or(zod.null())
    .optional(),
});

export const searchUserUserSearchPostBodyQDefault = "";
export const searchUserUserSearchPostBodyPagingPageDefault = 1;
export const searchUserUserSearchPostBodyPagingSizeDefault = 100;
export const searchUserUserSearchPostBodyDescDefault = true;

export const searchUserUserSearchPostBody = zod
  .object({
    q: zod.string().optional(),
    paging: zod
      .object({
        page: zod
          .number()
          .default(searchUserUserSearchPostBodyPagingPageDefault),
        size: zod
          .number()
          .default(searchUserUserSearchPostBodyPagingSizeDefault),
      })
      .optional()
      .describe("„ÇØ„Ç®„É™„ÅÆ„Éö„Éº„Ç∏„É≥„Ç∞."),
    desc: zod.boolean().default(searchUserUserSearchPostBodyDescDefault),
    order_by: zod
      .array(
        zod.enum([
          "username",
          "display_name",
          "n_char",
          "n_sentence",
          "n_resource",
        ]),
      )
      .or(zod.null())
      .optional(),
  })
  .describe("„É¶„Éº„Ç∂„ÉºÊ§úÁ¥¢„Éë„É©„É°„Éº„Çø.");

export const searchUserUserSearchPostResponseDataItemUserDisplayNameMaxOne = 32;
export const searchUserUserSearchPostResponseDataItemUserProfileMaxOne = 160;
export const searchUserUserSearchPostResponseDataItemUserUsernameMaxOne = 16;
export const searchUserUserSearchPostResponseDataItemUserUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;

export const searchUserUserSearchPostResponse = zod
  .object({
    total: zod.number(),
    data: zod.array(
      zod
        .object({
          user: zod
            .object({
              display_name: zod
                .string()
                .max(
                  searchUserUserSearchPostResponseDataItemUserDisplayNameMaxOne,
                )
                .or(zod.null())
                .optional(),
              profile: zod
                .string()
                .max(searchUserUserSearchPostResponseDataItemUserProfileMaxOne)
                .or(zod.null())
                .optional(),
              avatar_url: zod.string().or(zod.null()).optional(),
              username: zod
                .string()
                .max(searchUserUserSearchPostResponseDataItemUserUsernameMaxOne)
                .regex(
                  searchUserUserSearchPostResponseDataItemUserUsernameRegExpOne,
                )
                .or(zod.null())
                .optional()
                .describe(
                  "ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ",
                ),
              uid: zod.string().uuid(),
              created: zod.string().datetime({}),
            })
            .describe("ÂÖ¨Èñã„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±."),
          archivement: zod
            .object({
              n_char: zod.number(),
              n_sentence: zod.number(),
              n_resource: zod.number(),
              created: zod.string().datetime({}),
            })
            .describe("„É¶„Éº„Ç∂„Éº„ÅÆ‰ΩúÊ•≠ÈáèË®à."),
        })
        .describe("Ê§úÁ¥¢ÁµêÊûúË°å."),
    ),
  })
  .describe("Ê§úÁ¥¢ÁµêÊûú.");

/**
 * Ë§áÊï∞„É¶„Éº„Ç∂„Éº„ÅÆÁèæÂú®„ÅÆÊàêÊûú„Çí„Åæ„Å®„ÇÅ„Å¶ÂèñÂæó.
 * @summary Get User Activity
 */
export const getUserActivityUserActivityPostBody = zod.object({
  user_ids: zod.array(zod.string().uuid().or(zod.string())),
});

export const getUserActivityUserActivityPostResponseUserDisplayNameMaxOne = 32;
export const getUserActivityUserActivityPostResponseUserProfileMaxOne = 160;
export const getUserActivityUserActivityPostResponseUserUsernameMaxOne = 16;
export const getUserActivityUserActivityPostResponseUserUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;

export const getUserActivityUserActivityPostResponseItem = zod
  .object({
    user: zod
      .object({
        display_name: zod
          .string()
          .max(getUserActivityUserActivityPostResponseUserDisplayNameMaxOne)
          .or(zod.null())
          .optional(),
        profile: zod
          .string()
          .max(getUserActivityUserActivityPostResponseUserProfileMaxOne)
          .or(zod.null())
          .optional(),
        avatar_url: zod.string().or(zod.null()).optional(),
        username: zod
          .string()
          .max(getUserActivityUserActivityPostResponseUserUsernameMaxOne)
          .regex(getUserActivityUserActivityPostResponseUserUsernameRegExpOne)
          .or(zod.null())
          .optional()
          .describe("ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ"),
        uid: zod.string().uuid(),
        created: zod.string().datetime({}),
      })
      .describe("ÂÖ¨Èñã„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±."),
    archivement: zod
      .object({
        n_char: zod.number(),
        n_sentence: zod.number(),
        n_resource: zod.number(),
        created: zod.string().datetime({}),
      })
      .describe("„É¶„Éº„Ç∂„Éº„ÅÆ‰ΩúÊ•≠ÈáèË®à."),
  })
  .describe("Ê§úÁ¥¢ÁµêÊûúË°å.");
export const getUserActivityUserActivityPostResponse = zod.array(
  getUserActivityUserActivityPostResponseItem,
);

/**
 * „Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Å™„Å©„ÅßÂà©Áî®„Åô„ÇãÊàêÊûú„ÅÆ‰øùÂ≠òAPI.
 * @summary Save User Achievement
 */
export const saveUserAchievementUserAchievementBatchGetQueryPageDefault = 1;
export const saveUserAchievementUserAchievementBatchGetQuerySizeDefault = 10000;

export const saveUserAchievementUserAchievementBatchGetQueryParams = zod.object(
  {
    page: zod
      .number()
      .default(saveUserAchievementUserAchievementBatchGetQueryPageDefault),
    size: zod
      .number()
      .default(saveUserAchievementUserAchievementBatchGetQuerySizeDefault),
  },
);

export const saveUserAchievementUserAchievementBatchGetResponse = zod
  .object({
    n_all_users: zod.number(),
    n_target: zod.number(),
    n_saved: zod.number(),
  })
  .describe("ÊàêÊûú„Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„ÉàÂÆüË°åÁµêÊûú.");
