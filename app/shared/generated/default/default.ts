/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import useSwr from "swr";
import type { Key, SWRConfiguration } from "swr";

/**
 * Check health.
 * @summary Check Health
 */
export type checkHealthHealthGetResponse200 = {
  data: string;
  status: 200;
};

export type checkHealthHealthGetResponseComposite =
  checkHealthHealthGetResponse200;

export type checkHealthHealthGetResponse =
  checkHealthHealthGetResponseComposite & {
    headers: Headers;
  };

export const getCheckHealthHealthGetUrl = () => {
  return "https://knowde.onrender.com/health";
};

export const checkHealthHealthGet = async (
  options?: RequestInit,
): Promise<checkHealthHealthGetResponse> => {
  const res = await fetch(getCheckHealthHealthGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: checkHealthHealthGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as checkHealthHealthGetResponse;
};

export const getCheckHealthHealthGetKey = () =>
  ["https://knowde.onrender.com/health"] as const;

export type CheckHealthHealthGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof checkHealthHealthGet>>
>;
export type CheckHealthHealthGetQueryError = Promise<unknown>;

/**
 * @summary Check Health
 */
export const useCheckHealthHealthGet = <TError = Promise<unknown>>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof checkHealthHealthGet>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  fetch?: RequestInit;
}) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getCheckHealthHealthGetKey() : null));
  const swrFn = () => checkHealthHealthGet(fetchOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
