/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type { Proposition } from "../fastAPI.schemas";

export const getListPropositionsPropositionGetResponseMock =
  (): Proposition[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      uid: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
      ]),
      created: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
      text: faker.string.alpha(20),
    }));

export const getCompletePropositionPropositionCompletionGetResponseMock = (
  overrideResponse: Partial<Proposition> = {},
): Proposition => ({
  uid: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  text: faker.string.alpha(20),
  ...overrideResponse,
});

export const getListPropositionsPropositionGetMockHandler = (
  overrideResponse?:
    | Proposition[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Proposition[]> | Proposition[]),
) => {
  return http.get("*/proposition", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListPropositionsPropositionGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAddPropositionPropositionPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/proposition", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getCompletePropositionPropositionCompletionGetMockHandler = (
  overrideResponse?:
    | Proposition
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Proposition> | Proposition),
) => {
  return http.get("*/proposition/completion", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCompletePropositionPropositionCompletionGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getChangePropositionPropositionUidPutMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.put("*/proposition/:uid", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeletePropositionPropositionUidDeleteMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/proposition/:uid", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};
export const getPropositionMock = () => [
  getListPropositionsPropositionGetMockHandler(),
  getAddPropositionPropositionPostMockHandler(),
  getCompletePropositionPropositionCompletionGetMockHandler(),
  getChangePropositionPropositionUidPutMockHandler(),
  getDeletePropositionPropositionUidDeleteMockHandler(),
];
