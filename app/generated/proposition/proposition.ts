/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import type {
  CompletePropositionPropositionCompletionGetParams,
  HTTPValidationError,
  Proposition,
  PropositionParam,
} from "../fastAPI.schemas";

/**
 * 命題一覧.
 * @summary List Propositions
 */
export type listPropositionsPropositionGetResponse200 = {
  data: Proposition[];
  status: 200;
};

export type listPropositionsPropositionGetResponseComposite =
  listPropositionsPropositionGetResponse200;

export type listPropositionsPropositionGetResponse =
  listPropositionsPropositionGetResponseComposite & {
    headers: Headers;
  };

export const getListPropositionsPropositionGetUrl = () => {
  return "http://localhost:8000/proposition";
};

export const listPropositionsPropositionGet = async (
  options?: RequestInit,
): Promise<listPropositionsPropositionGetResponse> => {
  const res = await fetch(getListPropositionsPropositionGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: listPropositionsPropositionGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as listPropositionsPropositionGetResponse;
};

/**
 * @summary Add Proposition
 */
export type addPropositionPropositionPostResponse201 = {
  data: unknown;
  status: 201;
};

export type addPropositionPropositionPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type addPropositionPropositionPostResponseComposite =
  | addPropositionPropositionPostResponse201
  | addPropositionPropositionPostResponse422;

export type addPropositionPropositionPostResponse =
  addPropositionPropositionPostResponseComposite & {
    headers: Headers;
  };

export const getAddPropositionPropositionPostUrl = () => {
  return "http://localhost:8000/proposition";
};

export const addPropositionPropositionPost = async (
  propositionParam: PropositionParam,
  options?: RequestInit,
): Promise<addPropositionPropositionPostResponse> => {
  const res = await fetch(getAddPropositionPropositionPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(propositionParam),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: addPropositionPropositionPostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as addPropositionPropositionPostResponse;
};

/**
 * 補完.
 * @summary Complete Proposition
 */
export type completePropositionPropositionCompletionGetResponse200 = {
  data: Proposition;
  status: 200;
};

export type completePropositionPropositionCompletionGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type completePropositionPropositionCompletionGetResponseComposite =
  | completePropositionPropositionCompletionGetResponse200
  | completePropositionPropositionCompletionGetResponse422;

export type completePropositionPropositionCompletionGetResponse =
  completePropositionPropositionCompletionGetResponseComposite & {
    headers: Headers;
  };

export const getCompletePropositionPropositionCompletionGetUrl = (
  params: CompletePropositionPropositionCompletionGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/proposition/completion?${stringifiedParams}`
    : "http://localhost:8000/proposition/completion";
};

export const completePropositionPropositionCompletionGet = async (
  params: CompletePropositionPropositionCompletionGetParams,
  options?: RequestInit,
): Promise<completePropositionPropositionCompletionGetResponse> => {
  const res = await fetch(
    getCompletePropositionPropositionCompletionGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: completePropositionPropositionCompletionGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as completePropositionPropositionCompletionGetResponse;
};

/**
 * @summary Change Proposition
 */
export type changePropositionPropositionUidPutResponse200 = {
  data: unknown;
  status: 200;
};

export type changePropositionPropositionUidPutResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type changePropositionPropositionUidPutResponseComposite =
  | changePropositionPropositionUidPutResponse200
  | changePropositionPropositionUidPutResponse422;

export type changePropositionPropositionUidPutResponse =
  changePropositionPropositionUidPutResponseComposite & {
    headers: Headers;
  };

export const getChangePropositionPropositionUidPutUrl = (uid: string) => {
  return `http://localhost:8000/proposition/${uid}`;
};

export const changePropositionPropositionUidPut = async (
  uid: string,
  propositionParam: PropositionParam,
  options?: RequestInit,
): Promise<changePropositionPropositionUidPutResponse> => {
  const res = await fetch(getChangePropositionPropositionUidPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(propositionParam),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: changePropositionPropositionUidPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as changePropositionPropositionUidPutResponse;
};

/**
 * 命題の削除.
 * @summary Delete Proposition
 */
export type deletePropositionPropositionUidDeleteResponse204 = {
  data: undefined;
  status: 204;
};

export type deletePropositionPropositionUidDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deletePropositionPropositionUidDeleteResponseComposite =
  | deletePropositionPropositionUidDeleteResponse204
  | deletePropositionPropositionUidDeleteResponse422;

export type deletePropositionPropositionUidDeleteResponse =
  deletePropositionPropositionUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getDeletePropositionPropositionUidDeleteUrl = (uid: string) => {
  return `http://localhost:8000/proposition/${uid}`;
};

export const deletePropositionPropositionUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<deletePropositionPropositionUidDeleteResponse> => {
  const res = await fetch(getDeletePropositionPropositionUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: deletePropositionPropositionUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as deletePropositionPropositionUidDeleteResponse;
};
