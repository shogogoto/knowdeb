/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * ÊñáÂ≠óÂàóÊ§úÁ¥¢.
 * @summary Search By Text
 */
export const searchByTextKnowdeGetQueryUserOauthAccountsDefault = [];
export const searchByTextKnowdeGetQueryUserDisplayNameMaxOne = 32;
export const searchByTextKnowdeGetQueryUserProfileMaxOne = 160;
export const searchByTextKnowdeGetQueryUserUsernameMaxOne = 16;
export const searchByTextKnowdeGetQueryUserUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;
export const searchByTextKnowdeGetQueryQDefault = "";
export const searchByTextKnowdeGetQueryTypeDefault = "CONTAINS";
export const searchByTextKnowdeGetQueryPageDefault = 1;
export const searchByTextKnowdeGetQuerySizeDefault = 100;
export const searchByTextKnowdeGetQueryNDetailDefault = 1;
export const searchByTextKnowdeGetQueryNPremiseDefault = 3;
export const searchByTextKnowdeGetQueryNConclusionDefault = 3;
export const searchByTextKnowdeGetQueryNReferDefault = 3;
export const searchByTextKnowdeGetQueryNReferredDefault = 3;
export const searchByTextKnowdeGetQueryDistAxiomDefault = 1;
export const searchByTextKnowdeGetQueryDistLeafDefault = 1;
export const searchByTextKnowdeGetQueryDescDefault = true;

export const searchByTextKnowdeGetQueryParams = zod.object({
  user: zod
    .object({
      oauth_accounts: zod
        .array(
          zod
            .object({
              id: zod.any(),
              oauth_name: zod.string(),
              access_token: zod.string(),
              expires_at: zod.number().or(zod.null()).optional(),
              refresh_token: zod.string().or(zod.null()).optional(),
              account_id: zod.string(),
              account_email: zod.string(),
            })
            .describe("Base OAuth account model."),
        )
        .default(searchByTextKnowdeGetQueryUserOauthAccountsDefault),
      display_name: zod
        .string()
        .max(searchByTextKnowdeGetQueryUserDisplayNameMaxOne)
        .or(zod.null())
        .optional(),
      profile: zod
        .string()
        .max(searchByTextKnowdeGetQueryUserProfileMaxOne)
        .or(zod.null())
        .optional(),
      avatar_url: zod.string().or(zod.null()).optional(),
      username: zod
        .string()
        .max(searchByTextKnowdeGetQueryUserUsernameMaxOne)
        .regex(searchByTextKnowdeGetQueryUserUsernameRegExpOne)
        .or(zod.null())
        .optional()
        .describe("ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ"),
      uid: zod.string().uuid(),
      email: zod.string().email(),
      hashed_password: zod.string(),
      is_active: zod.boolean(),
      is_superuser: zod.boolean(),
      is_verified: zod.boolean(),
      created: zod.string().datetime({}),
    })
    .describe("UserProtocol[UUID]„ÇíÊ∫Ä„Åü„Åô.")
    .or(zod.null())
    .optional(),
  q: zod.string().optional(),
  type: zod
    .enum(["CONTAINS", "STARTS_WITH", "ENDS_WITH", "REGEX", "EQUAL"])
    .default(searchByTextKnowdeGetQueryTypeDefault),
  page: zod.number().default(searchByTextKnowdeGetQueryPageDefault),
  size: zod.number().default(searchByTextKnowdeGetQuerySizeDefault),
  n_detail: zod.number().default(searchByTextKnowdeGetQueryNDetailDefault),
  n_premise: zod.number().default(searchByTextKnowdeGetQueryNPremiseDefault),
  n_conclusion: zod
    .number()
    .default(searchByTextKnowdeGetQueryNConclusionDefault),
  n_refer: zod.number().default(searchByTextKnowdeGetQueryNReferDefault),
  n_referred: zod.number().default(searchByTextKnowdeGetQueryNReferredDefault),
  dist_axiom: zod.number().default(searchByTextKnowdeGetQueryDistAxiomDefault),
  dist_leaf: zod.number().default(searchByTextKnowdeGetQueryDistLeafDefault),
  desc: zod.boolean().default(searchByTextKnowdeGetQueryDescDefault),
});

export const searchByTextKnowdeGetResponseDataItemStatsNDetailMin = -100;

export const searchByTextKnowdeGetResponseDataItemStatsNDetailMax = 1000;
export const searchByTextKnowdeGetResponseDataItemStatsNPremiseMin = -100;

export const searchByTextKnowdeGetResponseDataItemStatsNPremiseMax = 1000;
export const searchByTextKnowdeGetResponseDataItemStatsNConclusionMin = -100;

export const searchByTextKnowdeGetResponseDataItemStatsNConclusionMax = 1000;
export const searchByTextKnowdeGetResponseDataItemStatsNReferMin = -100;

export const searchByTextKnowdeGetResponseDataItemStatsNReferMax = 1000;
export const searchByTextKnowdeGetResponseDataItemStatsNReferredMin = -100;

export const searchByTextKnowdeGetResponseDataItemStatsNReferredMax = 1000;
export const searchByTextKnowdeGetResponseDataItemStatsDistAxiomMin = -100;

export const searchByTextKnowdeGetResponseDataItemStatsDistAxiomMax = 1000;
export const searchByTextKnowdeGetResponseDataItemStatsDistLeafMin = -100;

export const searchByTextKnowdeGetResponseDataItemStatsDistLeafMax = 1000;
export const searchByTextKnowdeGetResponseDataItemStatsScoreMinOne = -100;
export const searchByTextKnowdeGetResponseDataItemStatsScoreMaxOne = 1000;
export const searchByTextKnowdeGetResponseResourceInfosUserDisplayNameMaxOne = 32;
export const searchByTextKnowdeGetResponseResourceInfosUserProfileMaxOne = 160;
export const searchByTextKnowdeGetResponseResourceInfosUserUsernameMaxOne = 16;
export const searchByTextKnowdeGetResponseResourceInfosUserUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;

export const searchByTextKnowdeGetResponse = zod
  .object({
    total: zod.number(),
    data: zod.array(
      zod
        .object({
          sentence: zod.string(),
          uid: zod.string().uuid(),
          term: zod
            .object({
              names: zod.array(zod.string()).optional(),
              alias: zod
                .string()
                .or(zod.null())
                .optional()
                .describe("ÂèÇÁÖßÁî®„ÅÆÁÑ°ÊÑèÂë≥„Å™Ë®òÂè∑(ÂèÇÁÖß„ÇíÊåÅ„Åü„Å™„ÅÑ)"),
            })
            .describe("Áî®Ë™û.")
            .or(zod.null())
            .optional(),
          additional: zod
            .object({
              when: zod.string().or(zod.null()).optional(),
              where: zod.string().or(zod.null()).optional(),
              by: zod.string().or(zod.null()).optional(),
            })
            .describe("knowde‰ªòÂä†ÊÉÖÂ†±.")
            .or(zod.null())
            .optional(),
          stats: zod
            .object({
              n_detail: zod
                .number()
                .min(searchByTextKnowdeGetResponseDataItemStatsNDetailMin)
                .max(searchByTextKnowdeGetResponseDataItemStatsNDetailMax),
              n_premise: zod
                .number()
                .min(searchByTextKnowdeGetResponseDataItemStatsNPremiseMin)
                .max(searchByTextKnowdeGetResponseDataItemStatsNPremiseMax),
              n_conclusion: zod
                .number()
                .min(searchByTextKnowdeGetResponseDataItemStatsNConclusionMin)
                .max(searchByTextKnowdeGetResponseDataItemStatsNConclusionMax),
              n_refer: zod
                .number()
                .min(searchByTextKnowdeGetResponseDataItemStatsNReferMin)
                .max(searchByTextKnowdeGetResponseDataItemStatsNReferMax),
              n_referred: zod
                .number()
                .min(searchByTextKnowdeGetResponseDataItemStatsNReferredMin)
                .max(searchByTextKnowdeGetResponseDataItemStatsNReferredMax),
              dist_axiom: zod
                .number()
                .min(searchByTextKnowdeGetResponseDataItemStatsDistAxiomMin)
                .max(searchByTextKnowdeGetResponseDataItemStatsDistAxiomMax),
              dist_leaf: zod
                .number()
                .min(searchByTextKnowdeGetResponseDataItemStatsDistLeafMin)
                .max(searchByTextKnowdeGetResponseDataItemStatsDistLeafMax),
              score: zod
                .number()
                .min(searchByTextKnowdeGetResponseDataItemStatsScoreMinOne)
                .max(searchByTextKnowdeGetResponseDataItemStatsScoreMaxOne)
                .or(zod.null())
                .optional(),
            })
            .describe("Áü•Ë≠ò„ÅÆÈñ¢‰øÇÁµ±Ë®à."),
          resource_uid: zod.string().uuid(),
        })
        .describe("Áü•Ë≠ò„ÅÆÊúÄÂ∞èÂçò‰Ωç."),
    ),
    resource_infos: zod.record(
      zod.string(),
      zod
        .object({
          user: zod
            .object({
              display_name: zod
                .string()
                .max(
                  searchByTextKnowdeGetResponseResourceInfosUserDisplayNameMaxOne,
                )
                .or(zod.null())
                .optional(),
              profile: zod
                .string()
                .max(
                  searchByTextKnowdeGetResponseResourceInfosUserProfileMaxOne,
                )
                .or(zod.null())
                .optional(),
              avatar_url: zod.string().or(zod.null()).optional(),
              username: zod
                .string()
                .max(
                  searchByTextKnowdeGetResponseResourceInfosUserUsernameMaxOne,
                )
                .regex(
                  searchByTextKnowdeGetResponseResourceInfosUserUsernameRegExpOne,
                )
                .or(zod.null())
                .optional()
                .describe(
                  "ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ",
                ),
              uid: zod.string().uuid(),
              created: zod.string().datetime({}),
            })
            .describe("ÂÖ¨Èñã„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±."),
          resource: zod
            .object({
              name: zod.string(),
              element_id_property: zod.string().or(zod.null()).optional(),
              uid: zod.string().uuid(),
              authors: zod.array(zod.string()).or(zod.null()).optional(),
              published: zod.string().date().or(zod.null()).optional(),
              urls: zod
                .array(zod.string().url().min(1))
                .or(zod.null())
                .optional(),
              path: zod.array(zod.string()).or(zod.null()).optional(),
              updated: zod.string().datetime({}).or(zod.null()).optional(),
              txt_hash: zod.number().or(zod.null()).optional(),
            })
            .describe("LResource„ÅÆOGM, „É™„ÇΩ„Éº„Çπ„ÅÆ„É°„ÇøÊÉÖÂ†±."),
          resource_stats: zod
            .object({
              density: zod
                .number()
                .or(zod.null())
                .nullish()
                .describe("Ëæ∫„ÅÆÂâ≤Âêà„ÄÇÈ´ò„ÅÑ„Åª„Å©„ÄÅ„Éé„Éº„ÉâÂêåÂ£´„ÅåÂØÜ„Å´ÁµêÂêà„Åó„Å¶„ÅÑ„Çã"),
              diameter: zod
                .number()
                .or(zod.null())
                .nullish()
                .describe(
                  "ÊúÄÂ§ßÈõ¢ÂøÉË∑ùÈõ¢„ÄÇ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂÜÖ„ÅÆÊúÄ„ÇÇÈÅ†„ÅÑ„Éé„Éº„ÉâÈñì„ÅÆË∑ùÈõ¢„ÄÇ‰Ωé„ÅÑ„Åª„Å©„ÄÅ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Åå„Ç≥„É≥„Éë„ÇØ„Éà„ÅßÊÉÖÂ†±„ÅÆ‰ºùÈÅîÂäπÁéá„ÅåÈ´ò„ÅÑ„ÄÇÈùûÈÄ£Áµê„ÅÆ„Ç∞„É©„Éï„ÅÆÂ†¥Âêà„ÅØ„ÄÅÊúÄÂ§ß„ÅÆÂº∑ÈÄ£ÁµêÊàêÂàÜ„Å´ÂØæ„Åó„Å¶Ë®àÁÆó",
                ),
              radius: zod
                .number()
                .or(zod.null())
                .nullish()
                .describe(
                  "ÂêÑ„Éé„Éº„Éâ„Åã„Çâ„ÅÆÊúÄÂ§ßË∑ùÈõ¢„ÅÆÊúÄÂ∞èÂÄ§„ÄÇ‰Ωé„ÅÑ„Åª„Å©„ÄÅ‰∏≠ÂøÉÁöÑ„Å™„Éé„Éº„Éâ„Åã„ÇâÂÖ®‰Ωì„Å´„Ç¢„ÇØ„Çª„Çπ„Åó„ÇÑ„Åô„ÅÑ„ÄÇÈùûÈÄ£Áµê„ÅÆ„Ç∞„É©„Éï„ÅÆÂ†¥Âêà„ÅØ„ÄÅÊúÄÂ§ß„ÅÆÂº∑ÈÄ£ÁµêÊàêÂàÜ„Å´ÂØæ„Åó„Å¶Ë®àÁÆó",
                ),
              n_scc: zod
                .number()
                .or(zod.null())
                .nullish()
                .describe(
                  "„Ç∞„É©„Éï„Åå„ÅÑ„Åè„Å§„ÅÆÁã¨Á´ã„Åó„Åü„ÄåÂ≥∂„Äç„Å´ÂàÜ„Åã„Çå„Å¶„ÅÑ„Çã„Åã„ÄÇ‰Ωé„ÅÑ„Åª„Å©„ÄÅÁü•Ë≠ò„ÅåÂàÜÊñ≠„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ",
                ),
              average_degree: zod
                .number()
                .describe(
                  "‰∏Ä„Å§„ÅÆÁü•Ë≠ò„ÅåÂπ≥Âùá„Åó„Å¶„ÅÑ„Åè„Å§„ÅÆ‰ªñ„ÅÆÁü•Ë≠ò„Å®Èñ¢ÈÄ£‰ªò„ÅÑ„Å¶„ÅÑ„Çã„Åã„ÄÇÈ´ò„ÅÑ„Åª„Å©„ÄÅÁü•Ë≠ò„ÅåÂØÜ„Å´Èñ¢ÈÄ£„ÅóÂêà„ÅÜ",
                ),
              n_char: zod.number().describe("„ÉÜ„Ç≠„Çπ„Éà„ÅÆÁµ∂ÂØæÁöÑ„Å™„Éú„É™„É•„Éº„É†"),
              n_sentence: zod.number().describe("Áü•Ë≠ò„ÅÆÂü∫Êú¨ÁöÑ„Å™ÊßãÊàêÂçò‰Ωç„ÅÆÊï∞"),
              n_term: zod.number().describe("Ë™ûÂΩô„ÅÆË¶èÊ®°"),
              n_edge: zod.number().describe("Áü•Ë≠òÈñì„ÅÆÈñ¢‰øÇÊÄß„ÅÆÊï∞"),
              n_isolation: zod.number(),
              n_axiom: zod.number(),
              n_unrefered: zod
                .number()
                .describe("‰ªñ„ÅÆ„Å©„Åì„Åã„Çâ„ÇÇÂèÇÁÖß„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÁî®Ë™ûÊï∞"),
              r_isolation: zod
                .number()
                .describe("‰Ωé„ÅÑ„Åª„Å©„ÄÅÁü•Ë≠ò„ÅåÁõ∏‰∫í„Å´Êé•Á∂ö„Åï„Çå„Å¶„ÅÑ„Çã"),
              r_axiom: zod
                .number()
                .describe("‰Ωé„ÅÑ„Åª„Å©„ÄÅÂ∞ëÊï∞„ÅÆÂéüÁêÜ„Åã„ÇâÂ§ö„Åè„ÅÆÁü•Ë≠ò„ÅåÂæó„Çâ„Çå„Å¶„ÅÑ„Çã"),
              r_unrefered: zod
                .number()
                .describe("‰Ωé„ÅÑ„Åª„Å©„ÄÅÂÆöÁæ©„Åï„Çå„ÅüÁî®Ë™û„ÅåÁÑ°ÈßÑ„Å™„ÅèÊ¥ªÁî®„Åï„Çå„Å¶„ÅÑ„Çã"),
            })
            .describe("Áü•Ë≠ò„ÅÆÈáè„ÇíÁ§∫„ÅôÊåáÊ®ô for API."),
        })
        .describe("„É™„ÇΩ„Éº„Çπ„ÅÆÊâÄÊúâËÄÖ."),
    ),
  })
  .describe("knowdeÊ§úÁ¥¢ÁµêÊûú.");

/**
 * knowdeË©≥Á¥∞.
 * @summary Detail
 */
export const detailKnowdeSentenceSentenceIdGetParams = zod.object({
  sentence_id: zod.string(),
});

export const detailKnowdeSentenceSentenceIdGetQueryUserOauthAccountsDefault =
  [];
export const detailKnowdeSentenceSentenceIdGetQueryUserDisplayNameMaxOne = 32;
export const detailKnowdeSentenceSentenceIdGetQueryUserProfileMaxOne = 160;
export const detailKnowdeSentenceSentenceIdGetQueryUserUsernameMaxOne = 16;
export const detailKnowdeSentenceSentenceIdGetQueryUserUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;

export const detailKnowdeSentenceSentenceIdGetQueryParams = zod.object({
  user: zod
    .object({
      oauth_accounts: zod
        .array(
          zod
            .object({
              id: zod.any(),
              oauth_name: zod.string(),
              access_token: zod.string(),
              expires_at: zod.number().or(zod.null()).optional(),
              refresh_token: zod.string().or(zod.null()).optional(),
              account_id: zod.string(),
              account_email: zod.string(),
            })
            .describe("Base OAuth account model."),
        )
        .default(
          detailKnowdeSentenceSentenceIdGetQueryUserOauthAccountsDefault,
        ),
      display_name: zod
        .string()
        .max(detailKnowdeSentenceSentenceIdGetQueryUserDisplayNameMaxOne)
        .or(zod.null())
        .optional(),
      profile: zod
        .string()
        .max(detailKnowdeSentenceSentenceIdGetQueryUserProfileMaxOne)
        .or(zod.null())
        .optional(),
      avatar_url: zod.string().or(zod.null()).optional(),
      username: zod
        .string()
        .max(detailKnowdeSentenceSentenceIdGetQueryUserUsernameMaxOne)
        .regex(detailKnowdeSentenceSentenceIdGetQueryUserUsernameRegExpOne)
        .or(zod.null())
        .optional()
        .describe("ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ"),
      uid: zod.string().uuid(),
      email: zod.string().email(),
      hashed_password: zod.string(),
      is_active: zod.boolean(),
      is_superuser: zod.boolean(),
      is_verified: zod.boolean(),
      created: zod.string().datetime({}),
    })
    .describe("UserProtocol[UUID]„ÇíÊ∫Ä„Åü„Åô.")
    .or(zod.null())
    .optional(),
});

export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNDetailMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNDetailMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNPremiseMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNPremiseMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNConclusionMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNConclusionMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNReferMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNReferMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNReferredMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNReferredMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsDistAxiomMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsDistAxiomMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsDistLeafMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsDistLeafMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsScoreMinOne =
  -100;
export const detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsScoreMaxOne = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseLocationUserDisplayNameMaxOne = 32;
export const detailKnowdeSentenceSentenceIdGetResponseLocationUserProfileMaxOne = 160;
export const detailKnowdeSentenceSentenceIdGetResponseLocationUserUsernameMaxOne = 16;
export const detailKnowdeSentenceSentenceIdGetResponseLocationUserUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;
export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNDetailMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNDetailMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNPremiseMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNPremiseMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNConclusionMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNConclusionMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNReferMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNReferMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNReferredMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNReferredMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsDistAxiomMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsDistAxiomMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsDistLeafMin =
  -100;

export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsDistLeafMax = 1000;
export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsScoreMinOne =
  -100;
export const detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsScoreMaxOne = 1000;

export const detailKnowdeSentenceSentenceIdGetResponse = zod
  .object({
    uid: zod.string().uuid(),
    g: zod
      .object({
        directed: zod.boolean(),
        edges: zod.array(
          zod
            .object({
              type: zod
                .enum([
                  "head",
                  "sibling",
                  "below",
                  "def",
                  "resolved",
                  "quoterm",
                  "to",
                  "example",
                  "when",
                  "where",
                  "num",
                  "by",
                  "ref",
                  "anti",
                  "similar",
                ])
                .describe("„Ç∞„É©„ÉïÈñ¢‰øÇ„ÅÆÁ®ÆÈ°û."),
              source: zod.string(),
              target: zod.string(),
              key: zod.number(),
            })
            .describe("for fastapi schema."),
        ),
        graph: zod.record(zod.string(), zod.any()),
        multigraph: zod.boolean(),
        nodes: zod.array(zod.record(zod.string(), zod.string())),
      })
      .describe("for fastapi schema."),
    knowdes: zod.record(
      zod.string(),
      zod
        .object({
          sentence: zod.string(),
          uid: zod.string().uuid(),
          term: zod
            .object({
              names: zod.array(zod.string()).optional(),
              alias: zod
                .string()
                .or(zod.null())
                .optional()
                .describe("ÂèÇÁÖßÁî®„ÅÆÁÑ°ÊÑèÂë≥„Å™Ë®òÂè∑(ÂèÇÁÖß„ÇíÊåÅ„Åü„Å™„ÅÑ)"),
            })
            .describe("Áî®Ë™û.")
            .or(zod.null())
            .optional(),
          additional: zod
            .object({
              when: zod.string().or(zod.null()).optional(),
              where: zod.string().or(zod.null()).optional(),
              by: zod.string().or(zod.null()).optional(),
            })
            .describe("knowde‰ªòÂä†ÊÉÖÂ†±.")
            .or(zod.null())
            .optional(),
          stats: zod
            .object({
              n_detail: zod
                .number()
                .min(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNDetailMin,
                )
                .max(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNDetailMax,
                ),
              n_premise: zod
                .number()
                .min(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNPremiseMin,
                )
                .max(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNPremiseMax,
                ),
              n_conclusion: zod
                .number()
                .min(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNConclusionMin,
                )
                .max(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNConclusionMax,
                ),
              n_refer: zod
                .number()
                .min(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNReferMin,
                )
                .max(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNReferMax,
                ),
              n_referred: zod
                .number()
                .min(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNReferredMin,
                )
                .max(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsNReferredMax,
                ),
              dist_axiom: zod
                .number()
                .min(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsDistAxiomMin,
                )
                .max(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsDistAxiomMax,
                ),
              dist_leaf: zod
                .number()
                .min(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsDistLeafMin,
                )
                .max(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsDistLeafMax,
                ),
              score: zod
                .number()
                .min(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsScoreMinOne,
                )
                .max(
                  detailKnowdeSentenceSentenceIdGetResponseKnowdesStatsScoreMaxOne,
                )
                .or(zod.null())
                .optional(),
            })
            .describe("Áü•Ë≠ò„ÅÆÈñ¢‰øÇÁµ±Ë®à."),
          resource_uid: zod.string().uuid(),
        })
        .describe("Áü•Ë≠ò„ÅÆÊúÄÂ∞èÂçò‰Ωç."),
    ),
    location: zod
      .object({
        user: zod
          .object({
            display_name: zod
              .string()
              .max(
                detailKnowdeSentenceSentenceIdGetResponseLocationUserDisplayNameMaxOne,
              )
              .or(zod.null())
              .optional(),
            profile: zod
              .string()
              .max(
                detailKnowdeSentenceSentenceIdGetResponseLocationUserProfileMaxOne,
              )
              .or(zod.null())
              .optional(),
            avatar_url: zod.string().or(zod.null()).optional(),
            username: zod
              .string()
              .max(
                detailKnowdeSentenceSentenceIdGetResponseLocationUserUsernameMaxOne,
              )
              .regex(
                detailKnowdeSentenceSentenceIdGetResponseLocationUserUsernameRegExpOne,
              )
              .or(zod.null())
              .optional()
              .describe(
                "ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ",
              ),
            uid: zod.string().uuid(),
            created: zod.string().datetime({}),
          })
          .describe("ÂÖ¨Èñã„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±."),
        folders: zod.array(
          zod
            .object({
              val: zod.string(),
              uid: zod.string().uuid(),
            })
            .describe("UUID‰ªò„ÅçÊñáÁ´†."),
        ),
        resource: zod
          .object({
            name: zod.string(),
            element_id_property: zod.string().or(zod.null()).optional(),
            uid: zod.string().uuid(),
            authors: zod.array(zod.string()).or(zod.null()).optional(),
            published: zod.string().date().or(zod.null()).optional(),
            urls: zod
              .array(zod.string().url().min(1))
              .or(zod.null())
              .optional(),
            path: zod.array(zod.string()).or(zod.null()).optional(),
            updated: zod.string().datetime({}).or(zod.null()).optional(),
            txt_hash: zod.number().or(zod.null()).optional(),
          })
          .describe("LResource„ÅÆOGM, „É™„ÇΩ„Éº„Çπ„ÅÆ„É°„ÇøÊÉÖÂ†±."),
        headers: zod.array(
          zod
            .object({
              val: zod.string(),
              uid: zod.string().uuid(),
            })
            .describe("UUID‰ªò„ÅçÊñáÁ´†."),
        ),
        parents: zod.array(
          zod
            .object({
              sentence: zod.string(),
              uid: zod.string().uuid(),
              term: zod
                .object({
                  names: zod.array(zod.string()).optional(),
                  alias: zod
                    .string()
                    .or(zod.null())
                    .optional()
                    .describe("ÂèÇÁÖßÁî®„ÅÆÁÑ°ÊÑèÂë≥„Å™Ë®òÂè∑(ÂèÇÁÖß„ÇíÊåÅ„Åü„Å™„ÅÑ)"),
                })
                .describe("Áî®Ë™û.")
                .or(zod.null())
                .optional(),
              additional: zod
                .object({
                  when: zod.string().or(zod.null()).optional(),
                  where: zod.string().or(zod.null()).optional(),
                  by: zod.string().or(zod.null()).optional(),
                })
                .describe("knowde‰ªòÂä†ÊÉÖÂ†±.")
                .or(zod.null())
                .optional(),
              stats: zod
                .object({
                  n_detail: zod
                    .number()
                    .min(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNDetailMin,
                    )
                    .max(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNDetailMax,
                    ),
                  n_premise: zod
                    .number()
                    .min(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNPremiseMin,
                    )
                    .max(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNPremiseMax,
                    ),
                  n_conclusion: zod
                    .number()
                    .min(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNConclusionMin,
                    )
                    .max(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNConclusionMax,
                    ),
                  n_refer: zod
                    .number()
                    .min(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNReferMin,
                    )
                    .max(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNReferMax,
                    ),
                  n_referred: zod
                    .number()
                    .min(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNReferredMin,
                    )
                    .max(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsNReferredMax,
                    ),
                  dist_axiom: zod
                    .number()
                    .min(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsDistAxiomMin,
                    )
                    .max(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsDistAxiomMax,
                    ),
                  dist_leaf: zod
                    .number()
                    .min(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsDistLeafMin,
                    )
                    .max(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsDistLeafMax,
                    ),
                  score: zod
                    .number()
                    .min(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsScoreMinOne,
                    )
                    .max(
                      detailKnowdeSentenceSentenceIdGetResponseLocationParentsItemStatsScoreMaxOne,
                    )
                    .or(zod.null())
                    .optional(),
                })
                .describe("Áü•Ë≠ò„ÅÆÈñ¢‰øÇÁµ±Ë®à."),
              resource_uid: zod.string().uuid(),
            })
            .describe("Áü•Ë≠ò„ÅÆÊúÄÂ∞èÂçò‰Ωç."),
        ),
      })
      .describe("knowde„ÅÆ‰ΩçÁΩÆÊÉÖÂ†±."),
  })
  .describe("Ë©≥Á¥∞.");
