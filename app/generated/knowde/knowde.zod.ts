/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * 文字列検索.
 * @summary Search By Text
 */
export const searchByTextKnowdeGetQueryQDefault = ".*";
export const searchByTextKnowdeGetQueryTypeDefault = "REGEX";
export const searchByTextKnowdeGetQueryPagingPageDefault = 1;
export const searchByTextKnowdeGetQueryPagingSizeDefault = 100;
export const searchByTextKnowdeGetQueryOrderNDetailDefault = 1;
export const searchByTextKnowdeGetQueryOrderNPremiseDefault = 3;
export const searchByTextKnowdeGetQueryOrderNConclusionDefault = 3;
export const searchByTextKnowdeGetQueryOrderNReferDefault = 3;
export const searchByTextKnowdeGetQueryOrderNReferredDefault = -3;
export const searchByTextKnowdeGetQueryOrderDistAxiomDefault = 1;
export const searchByTextKnowdeGetQueryOrderDistLeafDefault = 1;
export const searchByTextKnowdeGetQueryOrderDescDefault = true;

export const searchByTextKnowdeGetQueryParams = zod.object({
  q: zod.string().default(searchByTextKnowdeGetQueryQDefault),
  type: zod
    .enum(["CONTAINS", "STARTS_WITH", "ENDS_WITH", "REGEX", "EQUAL"])
    .default(searchByTextKnowdeGetQueryTypeDefault),
  paging: zod
    .object({
      page: zod.number().default(searchByTextKnowdeGetQueryPagingPageDefault),
      size: zod.number().default(searchByTextKnowdeGetQueryPagingSizeDefault),
    })
    .optional(),
  order: zod
    .object({
      n_detail: zod
        .number()
        .default(searchByTextKnowdeGetQueryOrderNDetailDefault),
      n_premise: zod
        .number()
        .default(searchByTextKnowdeGetQueryOrderNPremiseDefault),
      n_conclusion: zod
        .number()
        .default(searchByTextKnowdeGetQueryOrderNConclusionDefault),
      n_refer: zod
        .number()
        .default(searchByTextKnowdeGetQueryOrderNReferDefault),
      n_referred: zod
        .number()
        .default(searchByTextKnowdeGetQueryOrderNReferredDefault),
      dist_axiom: zod
        .number()
        .default(searchByTextKnowdeGetQueryOrderDistAxiomDefault),
      dist_leaf: zod
        .number()
        .default(searchByTextKnowdeGetQueryOrderDistLeafDefault),
      desc: zod.boolean().default(searchByTextKnowdeGetQueryOrderDescDefault),
    })
    .describe(
      "ORDER BY句.\n\nweightと項目の合計値(score)でソートできる\n他のスコア算出方法についてはペンディング",
    )
    .or(zod.null())
    .optional(),
});

export const searchByTextKnowdeGetResponseStatsNDetailMin = 0;

export const searchByTextKnowdeGetResponseStatsNDetailMax = 1000;
export const searchByTextKnowdeGetResponseStatsNPremiseMin = 0;

export const searchByTextKnowdeGetResponseStatsNPremiseMax = 1000;
export const searchByTextKnowdeGetResponseStatsNConclusionMin = 0;

export const searchByTextKnowdeGetResponseStatsNConclusionMax = 1000;
export const searchByTextKnowdeGetResponseStatsNReferMin = 0;

export const searchByTextKnowdeGetResponseStatsNReferMax = 1000;
export const searchByTextKnowdeGetResponseStatsNReferredMin = 0;

export const searchByTextKnowdeGetResponseStatsNReferredMax = 1000;
export const searchByTextKnowdeGetResponseStatsDistAxiomMin = 0;

export const searchByTextKnowdeGetResponseStatsDistAxiomMax = 1000;
export const searchByTextKnowdeGetResponseStatsDistLeafMin = 0;

export const searchByTextKnowdeGetResponseStatsDistLeafMax = 1000;
export const searchByTextKnowdeGetResponseStatsScoreMinOne = 0;
export const searchByTextKnowdeGetResponseStatsScoreMaxOne = 1000;

export const searchByTextKnowdeGetResponseItem = zod
  .object({
    center: zod
      .object({
        sentence: zod.string(),
        uid: zod.string().uuid(),
        term: zod
          .object({
            names: zod.array(zod.string()).optional(),
            alias: zod
              .string()
              .or(zod.null())
              .optional()
              .describe("参照用の無意味な記号(参照を持たない)"),
          })
          .describe("用語.")
          .or(zod.null())
          .optional(),
      })
      .describe("知識の最小単位."),
    when: zod.string().or(zod.null()).optional(),
    details: zod
      .array(
        zod
          .object({
            sentence: zod.string(),
            uid: zod.string().uuid(),
            term: zod
              .object({
                names: zod.array(zod.string()).optional(),
                alias: zod
                  .string()
                  .or(zod.null())
                  .optional()
                  .describe("参照用の無意味な記号(参照を持たない)"),
              })
              .describe("用語.")
              .or(zod.null())
              .optional(),
          })
          .describe("知識の最小単位."),
      )
      .optional(),
    premises: zod
      .array(
        zod
          .object({
            sentence: zod.string(),
            uid: zod.string().uuid(),
            term: zod
              .object({
                names: zod.array(zod.string()).optional(),
                alias: zod
                  .string()
                  .or(zod.null())
                  .optional()
                  .describe("参照用の無意味な記号(参照を持たない)"),
              })
              .describe("用語.")
              .or(zod.null())
              .optional(),
          })
          .describe("知識の最小単位."),
      )
      .optional(),
    conclusions: zod
      .array(
        zod
          .object({
            sentence: zod.string(),
            uid: zod.string().uuid(),
            term: zod
              .object({
                names: zod.array(zod.string()).optional(),
                alias: zod
                  .string()
                  .or(zod.null())
                  .optional()
                  .describe("参照用の無意味な記号(参照を持たない)"),
              })
              .describe("用語.")
              .or(zod.null())
              .optional(),
          })
          .describe("知識の最小単位."),
      )
      .optional(),
    refers: zod
      .array(
        zod
          .object({
            sentence: zod.string(),
            uid: zod.string().uuid(),
            term: zod
              .object({
                names: zod.array(zod.string()).optional(),
                alias: zod
                  .string()
                  .or(zod.null())
                  .optional()
                  .describe("参照用の無意味な記号(参照を持たない)"),
              })
              .describe("用語.")
              .or(zod.null())
              .optional(),
          })
          .describe("知識の最小単位."),
      )
      .optional(),
    referreds: zod
      .array(
        zod
          .object({
            sentence: zod.string(),
            uid: zod.string().uuid(),
            term: zod
              .object({
                names: zod.array(zod.string()).optional(),
                alias: zod
                  .string()
                  .or(zod.null())
                  .optional()
                  .describe("参照用の無意味な記号(参照を持たない)"),
              })
              .describe("用語.")
              .or(zod.null())
              .optional(),
          })
          .describe("知識の最小単位."),
      )
      .optional(),
    stats: zod
      .object({
        n_detail: zod
          .number()
          .min(searchByTextKnowdeGetResponseStatsNDetailMin)
          .max(searchByTextKnowdeGetResponseStatsNDetailMax),
        n_premise: zod
          .number()
          .min(searchByTextKnowdeGetResponseStatsNPremiseMin)
          .max(searchByTextKnowdeGetResponseStatsNPremiseMax),
        n_conclusion: zod
          .number()
          .min(searchByTextKnowdeGetResponseStatsNConclusionMin)
          .max(searchByTextKnowdeGetResponseStatsNConclusionMax),
        n_refer: zod
          .number()
          .min(searchByTextKnowdeGetResponseStatsNReferMin)
          .max(searchByTextKnowdeGetResponseStatsNReferMax),
        n_referred: zod
          .number()
          .min(searchByTextKnowdeGetResponseStatsNReferredMin)
          .max(searchByTextKnowdeGetResponseStatsNReferredMax),
        dist_axiom: zod
          .number()
          .min(searchByTextKnowdeGetResponseStatsDistAxiomMin)
          .max(searchByTextKnowdeGetResponseStatsDistAxiomMax),
        dist_leaf: zod
          .number()
          .min(searchByTextKnowdeGetResponseStatsDistLeafMin)
          .max(searchByTextKnowdeGetResponseStatsDistLeafMax),
        score: zod
          .number()
          .min(searchByTextKnowdeGetResponseStatsScoreMinOne)
          .max(searchByTextKnowdeGetResponseStatsScoreMaxOne)
          .or(zod.null()),
      })
      .describe("知識の関係統計.")
      .or(zod.null())
      .optional(),
  })
  .describe("周辺情報も含める.");
export const searchByTextKnowdeGetResponse = zod.array(
  searchByTextKnowdeGetResponseItem,
);
