"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detailKnowdeSentenceSentenceIdGetResponse = exports.detailKnowdeSentenceSentenceIdGetResponseLocationUserIsVerifiedDefault = exports.detailKnowdeSentenceSentenceIdGetResponseLocationUserIsSuperuserDefault = exports.detailKnowdeSentenceSentenceIdGetParams = exports.searchByTextKnowdeGetResponse = exports.searchByTextKnowdeGetResponseDataItemStatsScoreMaxOne = exports.searchByTextKnowdeGetResponseDataItemStatsScoreMinOne = exports.searchByTextKnowdeGetResponseDataItemStatsDistLeafMax = exports.searchByTextKnowdeGetResponseDataItemStatsDistLeafMin = exports.searchByTextKnowdeGetResponseDataItemStatsDistAxiomMax = exports.searchByTextKnowdeGetResponseDataItemStatsDistAxiomMin = exports.searchByTextKnowdeGetResponseDataItemStatsNReferredMax = exports.searchByTextKnowdeGetResponseDataItemStatsNReferredMin = exports.searchByTextKnowdeGetResponseDataItemStatsNReferMax = exports.searchByTextKnowdeGetResponseDataItemStatsNReferMin = exports.searchByTextKnowdeGetResponseDataItemStatsNConclusionMax = exports.searchByTextKnowdeGetResponseDataItemStatsNConclusionMin = exports.searchByTextKnowdeGetResponseDataItemStatsNPremiseMax = exports.searchByTextKnowdeGetResponseDataItemStatsNPremiseMin = exports.searchByTextKnowdeGetResponseDataItemStatsNDetailMax = exports.searchByTextKnowdeGetResponseDataItemStatsNDetailMin = exports.searchByTextKnowdeGetQueryParams = exports.searchByTextKnowdeGetQueryDescDefault = exports.searchByTextKnowdeGetQueryDistLeafDefault = exports.searchByTextKnowdeGetQueryDistAxiomDefault = exports.searchByTextKnowdeGetQueryNReferredDefault = exports.searchByTextKnowdeGetQueryNReferDefault = exports.searchByTextKnowdeGetQueryNConclusionDefault = exports.searchByTextKnowdeGetQueryNPremiseDefault = exports.searchByTextKnowdeGetQueryNDetailDefault = exports.searchByTextKnowdeGetQuerySizeDefault = exports.searchByTextKnowdeGetQueryPageDefault = exports.searchByTextKnowdeGetQueryTypeDefault = exports.searchByTextKnowdeGetQueryQDefault = void 0;
/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
var zod_1 = require("zod");
/**
 * 文字列検索.
 * @summary Search By Text
 */
exports.searchByTextKnowdeGetQueryQDefault = "";
exports.searchByTextKnowdeGetQueryTypeDefault = "CONTAINS";
exports.searchByTextKnowdeGetQueryPageDefault = 1;
exports.searchByTextKnowdeGetQuerySizeDefault = 100;
exports.searchByTextKnowdeGetQueryNDetailDefault = 1;
exports.searchByTextKnowdeGetQueryNPremiseDefault = 3;
exports.searchByTextKnowdeGetQueryNConclusionDefault = 3;
exports.searchByTextKnowdeGetQueryNReferDefault = 3;
exports.searchByTextKnowdeGetQueryNReferredDefault = 3;
exports.searchByTextKnowdeGetQueryDistAxiomDefault = 1;
exports.searchByTextKnowdeGetQueryDistLeafDefault = 1;
exports.searchByTextKnowdeGetQueryDescDefault = true;
exports.searchByTextKnowdeGetQueryParams = zod_1.z.object({
    q: zod_1.z.string().optional(),
    type: zod_1.z
        .enum(["CONTAINS", "STARTS_WITH", "ENDS_WITH", "REGEX", "EQUAL"])
        .default(exports.searchByTextKnowdeGetQueryTypeDefault),
    page: zod_1.z.number().default(exports.searchByTextKnowdeGetQueryPageDefault),
    size: zod_1.z.number().default(exports.searchByTextKnowdeGetQuerySizeDefault),
    n_detail: zod_1.z.number().default(exports.searchByTextKnowdeGetQueryNDetailDefault),
    n_premise: zod_1.z.number().default(exports.searchByTextKnowdeGetQueryNPremiseDefault),
    n_conclusion: zod_1.z
        .number()
        .default(exports.searchByTextKnowdeGetQueryNConclusionDefault),
    n_refer: zod_1.z.number().default(exports.searchByTextKnowdeGetQueryNReferDefault),
    n_referred: zod_1.z.number().default(exports.searchByTextKnowdeGetQueryNReferredDefault),
    dist_axiom: zod_1.z.number().default(exports.searchByTextKnowdeGetQueryDistAxiomDefault),
    dist_leaf: zod_1.z.number().default(exports.searchByTextKnowdeGetQueryDistLeafDefault),
    desc: zod_1.z.boolean().default(exports.searchByTextKnowdeGetQueryDescDefault),
});
exports.searchByTextKnowdeGetResponseDataItemStatsNDetailMin = -100;
exports.searchByTextKnowdeGetResponseDataItemStatsNDetailMax = 1000;
exports.searchByTextKnowdeGetResponseDataItemStatsNPremiseMin = -100;
exports.searchByTextKnowdeGetResponseDataItemStatsNPremiseMax = 1000;
exports.searchByTextKnowdeGetResponseDataItemStatsNConclusionMin = -100;
exports.searchByTextKnowdeGetResponseDataItemStatsNConclusionMax = 1000;
exports.searchByTextKnowdeGetResponseDataItemStatsNReferMin = -100;
exports.searchByTextKnowdeGetResponseDataItemStatsNReferMax = 1000;
exports.searchByTextKnowdeGetResponseDataItemStatsNReferredMin = -100;
exports.searchByTextKnowdeGetResponseDataItemStatsNReferredMax = 1000;
exports.searchByTextKnowdeGetResponseDataItemStatsDistAxiomMin = -100;
exports.searchByTextKnowdeGetResponseDataItemStatsDistAxiomMax = 1000;
exports.searchByTextKnowdeGetResponseDataItemStatsDistLeafMin = -100;
exports.searchByTextKnowdeGetResponseDataItemStatsDistLeafMax = 1000;
exports.searchByTextKnowdeGetResponseDataItemStatsScoreMinOne = -100;
exports.searchByTextKnowdeGetResponseDataItemStatsScoreMaxOne = 1000;
exports.searchByTextKnowdeGetResponse = zod_1.z
    .object({
    total: zod_1.z.number(),
    data: zod_1.z.array(zod_1.z
        .object({
        center: zod_1.z
            .object({
            sentence: zod_1.z.string(),
            uid: zod_1.z.string().uuid(),
            term: zod_1.z
                .object({
                names: zod_1.z.array(zod_1.z.string()).optional(),
                alias: zod_1.z
                    .string()
                    .or(zod_1.z.null())
                    .optional()
                    .describe("参照用の無意味な記号(参照を持たない)"),
            })
                .describe("用語.")
                .or(zod_1.z.null())
                .optional(),
            when: zod_1.z.string().or(zod_1.z.null()).optional(),
        })
            .describe("知識の最小単位."),
        when: zod_1.z.string().or(zod_1.z.null()).optional(),
        details: zod_1.z.array(zod_1.z
            .object({
            sentence: zod_1.z.string(),
            uid: zod_1.z.string().uuid(),
            term: zod_1.z
                .object({
                names: zod_1.z.array(zod_1.z.string()).optional(),
                alias: zod_1.z
                    .string()
                    .or(zod_1.z.null())
                    .optional()
                    .describe("参照用の無意味な記号(参照を持たない)"),
            })
                .describe("用語.")
                .or(zod_1.z.null())
                .optional(),
            when: zod_1.z.string().or(zod_1.z.null()).optional(),
        })
            .describe("知識の最小単位.")),
        premises: zod_1.z.array(zod_1.z
            .object({
            sentence: zod_1.z.string(),
            uid: zod_1.z.string().uuid(),
            term: zod_1.z
                .object({
                names: zod_1.z.array(zod_1.z.string()).optional(),
                alias: zod_1.z
                    .string()
                    .or(zod_1.z.null())
                    .optional()
                    .describe("参照用の無意味な記号(参照を持たない)"),
            })
                .describe("用語.")
                .or(zod_1.z.null())
                .optional(),
            when: zod_1.z.string().or(zod_1.z.null()).optional(),
        })
            .describe("知識の最小単位.")),
        conclusions: zod_1.z.array(zod_1.z
            .object({
            sentence: zod_1.z.string(),
            uid: zod_1.z.string().uuid(),
            term: zod_1.z
                .object({
                names: zod_1.z.array(zod_1.z.string()).optional(),
                alias: zod_1.z
                    .string()
                    .or(zod_1.z.null())
                    .optional()
                    .describe("参照用の無意味な記号(参照を持たない)"),
            })
                .describe("用語.")
                .or(zod_1.z.null())
                .optional(),
            when: zod_1.z.string().or(zod_1.z.null()).optional(),
        })
            .describe("知識の最小単位.")),
        refers: zod_1.z.array(zod_1.z
            .object({
            sentence: zod_1.z.string(),
            uid: zod_1.z.string().uuid(),
            term: zod_1.z
                .object({
                names: zod_1.z.array(zod_1.z.string()).optional(),
                alias: zod_1.z
                    .string()
                    .or(zod_1.z.null())
                    .optional()
                    .describe("参照用の無意味な記号(参照を持たない)"),
            })
                .describe("用語.")
                .or(zod_1.z.null())
                .optional(),
            when: zod_1.z.string().or(zod_1.z.null()).optional(),
        })
            .describe("知識の最小単位.")),
        referreds: zod_1.z.array(zod_1.z
            .object({
            sentence: zod_1.z.string(),
            uid: zod_1.z.string().uuid(),
            term: zod_1.z
                .object({
                names: zod_1.z.array(zod_1.z.string()).optional(),
                alias: zod_1.z
                    .string()
                    .or(zod_1.z.null())
                    .optional()
                    .describe("参照用の無意味な記号(参照を持たない)"),
            })
                .describe("用語.")
                .or(zod_1.z.null())
                .optional(),
            when: zod_1.z.string().or(zod_1.z.null()).optional(),
        })
            .describe("知識の最小単位.")),
        stats: zod_1.z
            .object({
            n_detail: zod_1.z
                .number()
                .min(exports.searchByTextKnowdeGetResponseDataItemStatsNDetailMin)
                .max(exports.searchByTextKnowdeGetResponseDataItemStatsNDetailMax),
            n_premise: zod_1.z
                .number()
                .min(exports.searchByTextKnowdeGetResponseDataItemStatsNPremiseMin)
                .max(exports.searchByTextKnowdeGetResponseDataItemStatsNPremiseMax),
            n_conclusion: zod_1.z
                .number()
                .min(exports.searchByTextKnowdeGetResponseDataItemStatsNConclusionMin)
                .max(exports.searchByTextKnowdeGetResponseDataItemStatsNConclusionMax),
            n_refer: zod_1.z
                .number()
                .min(exports.searchByTextKnowdeGetResponseDataItemStatsNReferMin)
                .max(exports.searchByTextKnowdeGetResponseDataItemStatsNReferMax),
            n_referred: zod_1.z
                .number()
                .min(exports.searchByTextKnowdeGetResponseDataItemStatsNReferredMin)
                .max(exports.searchByTextKnowdeGetResponseDataItemStatsNReferredMax),
            dist_axiom: zod_1.z
                .number()
                .min(exports.searchByTextKnowdeGetResponseDataItemStatsDistAxiomMin)
                .max(exports.searchByTextKnowdeGetResponseDataItemStatsDistAxiomMax),
            dist_leaf: zod_1.z
                .number()
                .min(exports.searchByTextKnowdeGetResponseDataItemStatsDistLeafMin)
                .max(exports.searchByTextKnowdeGetResponseDataItemStatsDistLeafMax),
            score: zod_1.z
                .number()
                .min(exports.searchByTextKnowdeGetResponseDataItemStatsScoreMinOne)
                .max(exports.searchByTextKnowdeGetResponseDataItemStatsScoreMaxOne)
                .or(zod_1.z.null())
                .optional(),
        })
            .describe("知識の関係統計.")
            .or(zod_1.z.null())
            .optional(),
    })
        .describe("周辺情報も含める.")),
})
    .describe("knowde検索結果.");
/**
 * knowde詳細.
 * @summary Detail
 */
exports.detailKnowdeSentenceSentenceIdGetParams = zod_1.z.object({
    sentence_id: zod_1.z.string().uuid(),
});
exports.detailKnowdeSentenceSentenceIdGetResponseLocationUserIsSuperuserDefault = false;
exports.detailKnowdeSentenceSentenceIdGetResponseLocationUserIsVerifiedDefault = false;
exports.detailKnowdeSentenceSentenceIdGetResponse = zod_1.z
    .object({
    uid: zod_1.z.string().uuid(),
    g: zod_1.z
        .object({
        directed: zod_1.z.boolean(),
        edges: zod_1.z.array(zod_1.z
            .object({
            source: zod_1.z.string(),
            target: zod_1.z.string(),
        })
            .describe("for fastapi schema.")),
        graph: zod_1.z.record(zod_1.z.string(), zod_1.z.any()),
        multigraph: zod_1.z.boolean(),
        nodes: zod_1.z.array(zod_1.z.record(zod_1.z.string(), zod_1.z.string())),
    })
        .describe("for fastapi schema."),
    knowdes: zod_1.z.record(zod_1.z.string(), zod_1.z
        .object({
        sentence: zod_1.z.string(),
        uid: zod_1.z.string().uuid(),
        term: zod_1.z
            .object({
            names: zod_1.z.array(zod_1.z.string()).optional(),
            alias: zod_1.z
                .string()
                .or(zod_1.z.null())
                .optional()
                .describe("参照用の無意味な記号(参照を持たない)"),
        })
            .describe("用語.")
            .or(zod_1.z.null())
            .optional(),
        when: zod_1.z.string().or(zod_1.z.null()).optional(),
    })
        .describe("知識の最小単位.")),
    location: zod_1.z
        .object({
        user: zod_1.z
            .object({
            uid: zod_1.z.string().uuid().or(zod_1.z.null()).optional(),
            email: zod_1.z.string().email(),
            hashed_password: zod_1.z.string(),
            is_active: zod_1.z.boolean(),
            is_superuser: zod_1.z.boolean().optional(),
            is_verified: zod_1.z.boolean().optional(),
            oauth_accounts: zod_1.z
                .array(zod_1.z
                .object({
                oauth_name: zod_1.z.string(),
                access_token: zod_1.z.string(),
                expires_at: zod_1.z.number().or(zod_1.z.null()).optional(),
                refresh_token: zod_1.z.string().or(zod_1.z.null()).optional(),
                account_id: zod_1.z.string(),
                account_email: zod_1.z.string().email(),
            })
                .describe("OAuthAccountProtocol[UUID]を満たす."))
                .optional(),
            clerk_id: zod_1.z.string().or(zod_1.z.null()).optional(),
            display_name: zod_1.z.string().or(zod_1.z.null()).optional(),
        })
            .describe("UserProtocol[UUID]を満たす."),
        folders: zod_1.z.array(zod_1.z
            .object({
            val: zod_1.z.string(),
            uid: zod_1.z.string().uuid(),
        })
            .describe("UUID付き文章.")),
        resource: zod_1.z
            .object({
            name: zod_1.z.string(),
            element_id_property: zod_1.z.string().or(zod_1.z.null()).optional(),
            uid: zod_1.z.string().uuid(),
            authors: zod_1.z.array(zod_1.z.string()).or(zod_1.z.null()).optional(),
            published: zod_1.z.string().date().or(zod_1.z.null()).optional(),
            urls: zod_1.z
                .array(zod_1.z.string().url().min(1))
                .or(zod_1.z.null())
                .optional(),
            path: zod_1.z.array(zod_1.z.string()).or(zod_1.z.null()).optional(),
            updated: zod_1.z.string().datetime({}).or(zod_1.z.null()).optional(),
            txt_hash: zod_1.z.number().or(zod_1.z.null()).optional(),
        })
            .describe("LResourceのOGM, リソースのメタ情報."),
        headers: zod_1.z.array(zod_1.z
            .object({
            val: zod_1.z.string(),
            uid: zod_1.z.string().uuid(),
        })
            .describe("UUID付き文章.")),
        parents: zod_1.z.array(zod_1.z
            .object({
            sentence: zod_1.z.string(),
            uid: zod_1.z.string().uuid(),
            term: zod_1.z
                .object({
                names: zod_1.z.array(zod_1.z.string()).optional(),
                alias: zod_1.z
                    .string()
                    .or(zod_1.z.null())
                    .optional()
                    .describe("参照用の無意味な記号(参照を持たない)"),
            })
                .describe("用語.")
                .or(zod_1.z.null())
                .optional(),
            when: zod_1.z.string().or(zod_1.z.null()).optional(),
        })
            .describe("知識の最小単位.")),
    })
        .describe("knowdeの位置情報."),
})
    .describe("詳細.");
