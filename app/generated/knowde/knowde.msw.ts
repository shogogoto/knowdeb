/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type { KnowdeDetail, KnowdeSearchResult } from "../fastAPI.schemas";

export const getSearchByTextKnowdeGetResponseMock = (
  overrideResponse: Partial<KnowdeSearchResult> = {},
): KnowdeSearchResult => ({
  total: faker.number.int({ min: undefined, max: undefined }),
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    sentence: faker.string.alpha(20),
    uid: faker.string.uuid(),
    term: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          names: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha(20)),
            undefined,
          ]),
          alias: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined,
          ]),
        },
        null,
      ]),
      undefined,
    ]),
    additional: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          when: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined,
          ]),
          where: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined,
          ]),
          by: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined,
          ]),
        },
        null,
      ]),
      undefined,
    ]),
    stats: {
      n_detail: faker.number.int({ min: -100, max: 1000 }),
      n_premise: faker.number.int({ min: -100, max: 1000 }),
      n_conclusion: faker.number.int({ min: -100, max: 1000 }),
      n_refer: faker.number.int({ min: -100, max: 1000 }),
      n_referred: faker.number.int({ min: -100, max: 1000 }),
      dist_axiom: faker.number.int({ min: -100, max: 1000 }),
      dist_leaf: faker.number.int({ min: -100, max: 1000 }),
      score: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: -100, max: 1000 }),
          null,
        ]),
        undefined,
      ]),
    },
    resource_uid: faker.string.uuid(),
  })),
  owners: {
    [faker.string.alphanumeric(5)]: {
      user: {
        display_name: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined,
        ]),
        profile: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined,
        ]),
        avatar_url: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined,
        ]),
        username: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.helpers.fromRegExp("^[a-zA-Z0-9_-]+$"),
            null,
          ]),
          undefined,
        ]),
        uid: faker.string.uuid(),
        created: `${faker.date.past().toISOString().split(".")[0]}Z`,
      },
      resource: {
        name: faker.string.alpha(20),
        element_id_property: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined,
        ]),
        uid: faker.string.uuid(),
        authors: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha(20)),
            null,
          ]),
          undefined,
        ]),
        published: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.date.past().toISOString().split("T")[0],
            null,
          ]),
          undefined,
        ]),
        urls: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.internet.url()),
            null,
          ]),
          undefined,
        ]),
        path: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha(20)),
            null,
          ]),
          undefined,
        ]),
        updated: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
          undefined,
        ]),
        txt_hash: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
      },
    },
  },
  ...overrideResponse,
});

export const getDetailKnowdeSentenceSentenceIdGetResponseMock = (
  overrideResponse: Partial<KnowdeDetail> = {},
): KnowdeDetail => ({
  uid: faker.string.uuid(),
  g: {
    directed: faker.datatype.boolean(),
    edges: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      type: faker.helpers.arrayElement([
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      ] as const),
      source: faker.string.alpha(20),
      target: faker.string.alpha(20),
      key: faker.number.int({ min: undefined, max: undefined }),
    })),
    graph: {},
    multigraph: faker.datatype.boolean(),
    nodes: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      [faker.string.alphanumeric(5)]: faker.string.alpha(20),
    })),
  },
  knowdes: {
    [faker.string.alphanumeric(5)]: {
      sentence: faker.string.alpha(20),
      uid: faker.string.uuid(),
      term: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            names: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.string.alpha(20)),
              undefined,
            ]),
            alias: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
          },
          null,
        ]),
        undefined,
      ]),
      additional: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            when: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            where: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            by: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
          },
          null,
        ]),
        undefined,
      ]),
      stats: {
        n_detail: faker.number.int({ min: -100, max: 1000 }),
        n_premise: faker.number.int({ min: -100, max: 1000 }),
        n_conclusion: faker.number.int({ min: -100, max: 1000 }),
        n_refer: faker.number.int({ min: -100, max: 1000 }),
        n_referred: faker.number.int({ min: -100, max: 1000 }),
        dist_axiom: faker.number.int({ min: -100, max: 1000 }),
        dist_leaf: faker.number.int({ min: -100, max: 1000 }),
        score: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: -100, max: 1000 }),
            null,
          ]),
          undefined,
        ]),
      },
      resource_uid: faker.string.uuid(),
    },
  },
  location: {
    user: {
      display_name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      profile: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      avatar_url: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      username: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.helpers.fromRegExp("^[a-zA-Z0-9_-]+$"),
          null,
        ]),
        undefined,
      ]),
      uid: faker.string.uuid(),
      created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    },
    folders: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({ val: faker.string.alpha(20), uid: faker.string.uuid() })),
    resource: {
      name: faker.string.alpha(20),
      element_id_property: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      uid: faker.string.uuid(),
      authors: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha(20)),
          null,
        ]),
        undefined,
      ]),
      published: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.date.past().toISOString().split("T")[0],
          null,
        ]),
        undefined,
      ]),
      urls: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.internet.url()),
          null,
        ]),
        undefined,
      ]),
      path: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha(20)),
          null,
        ]),
        undefined,
      ]),
      updated: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
      txt_hash: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
    },
    headers: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({ val: faker.string.alpha(20), uid: faker.string.uuid() })),
    parents: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      sentence: faker.string.alpha(20),
      uid: faker.string.uuid(),
      term: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            names: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.string.alpha(20)),
              undefined,
            ]),
            alias: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
          },
          null,
        ]),
        undefined,
      ]),
      additional: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            when: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            where: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            by: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
          },
          null,
        ]),
        undefined,
      ]),
      stats: {
        n_detail: faker.number.int({ min: -100, max: 1000 }),
        n_premise: faker.number.int({ min: -100, max: 1000 }),
        n_conclusion: faker.number.int({ min: -100, max: 1000 }),
        n_refer: faker.number.int({ min: -100, max: 1000 }),
        n_referred: faker.number.int({ min: -100, max: 1000 }),
        dist_axiom: faker.number.int({ min: -100, max: 1000 }),
        dist_leaf: faker.number.int({ min: -100, max: 1000 }),
        score: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: -100, max: 1000 }),
            null,
          ]),
          undefined,
        ]),
      },
      resource_uid: faker.string.uuid(),
    })),
  },
  ...overrideResponse,
});

export const getSearchByTextKnowdeGetMockHandler = (
  overrideResponse?:
    | KnowdeSearchResult
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<KnowdeSearchResult> | KnowdeSearchResult),
) => {
  return http.get("*/knowde/", async (info) => {
    await delay(200);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSearchByTextKnowdeGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDetailKnowdeSentenceSentenceIdGetMockHandler = (
  overrideResponse?:
    | KnowdeDetail
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<KnowdeDetail> | KnowdeDetail),
) => {
  return http.get("*/knowde/sentence/:sentenceId", async (info) => {
    await delay(200);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDetailKnowdeSentenceSentenceIdGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getKnowdeMock = () => [
  getSearchByTextKnowdeGetMockHandler(),
  getDetailKnowdeSentenceSentenceIdGetMockHandler(),
];
