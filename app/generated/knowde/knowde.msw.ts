/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type { KAdjacency } from "../fastAPI.schemas";

export const getSearchByTextKnowdeGetResponseMock = (): KAdjacency[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    center: {
      sentence: faker.string.alpha(20),
      uid: faker.string.uuid(),
      term: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          {
            names: faker.helpers.arrayElement([
              Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.string.alpha(20)),
              undefined,
            ]),
            alias: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
          },
          null,
        ]),
        undefined,
      ]),
    },
    when: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined,
    ]),
    details: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        sentence: faker.string.alpha(20),
        uid: faker.string.uuid(),
        term: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              names: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() => faker.string.alpha(20)),
                undefined,
              ]),
              alias: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
            },
            null,
          ]),
          undefined,
        ]),
      })),
      undefined,
    ]),
    premises: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        sentence: faker.string.alpha(20),
        uid: faker.string.uuid(),
        term: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              names: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() => faker.string.alpha(20)),
                undefined,
              ]),
              alias: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
            },
            null,
          ]),
          undefined,
        ]),
      })),
      undefined,
    ]),
    conclusions: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        sentence: faker.string.alpha(20),
        uid: faker.string.uuid(),
        term: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              names: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() => faker.string.alpha(20)),
                undefined,
              ]),
              alias: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
            },
            null,
          ]),
          undefined,
        ]),
      })),
      undefined,
    ]),
    refers: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        sentence: faker.string.alpha(20),
        uid: faker.string.uuid(),
        term: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              names: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() => faker.string.alpha(20)),
                undefined,
              ]),
              alias: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
            },
            null,
          ]),
          undefined,
        ]),
      })),
      undefined,
    ]),
    referreds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        sentence: faker.string.alpha(20),
        uid: faker.string.uuid(),
        term: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              names: faker.helpers.arrayElement([
                Array.from(
                  { length: faker.number.int({ min: 1, max: 10 }) },
                  (_, i) => i + 1,
                ).map(() => faker.string.alpha(20)),
                undefined,
              ]),
              alias: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
            },
            null,
          ]),
          undefined,
        ]),
      })),
      undefined,
    ]),
    stats: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          n_detail: faker.number.int({ min: 0, max: 1000 }),
          n_premise: faker.number.int({ min: 0, max: 1000 }),
          n_conclusion: faker.number.int({ min: 0, max: 1000 }),
          n_refer: faker.number.int({ min: 0, max: 1000 }),
          n_referred: faker.number.int({ min: 0, max: 1000 }),
          dist_axiom: faker.number.int({ min: 0, max: 1000 }),
          dist_leaf: faker.number.int({ min: 0, max: 1000 }),
          score: faker.helpers.arrayElement([
            faker.number.int({ min: 0, max: 1000 }),
            null,
          ]),
        },
        null,
      ]),
      undefined,
    ]),
  }));

export const getSearchByTextKnowdeGetMockHandler = (
  overrideResponse?:
    | KAdjacency[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<KAdjacency[]> | KAdjacency[]),
) => {
  return http.get("*/knowde/", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSearchByTextKnowdeGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getKnowdeMock = () => [getSearchByTextKnowdeGetMockHandler()];
