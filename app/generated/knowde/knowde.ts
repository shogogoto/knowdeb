/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import useSwr from "swr";
import type { Key, SWRConfiguration } from "swr";

import type {
  HTTPValidationError,
  KnowdeDetail,
  KnowdeSearchResult,
  SearchByTextKnowdeGetParams,
} from "../fastAPI.schemas";

/**
 * 文字列検索.
 * @summary Search By Text
 */
export type searchByTextKnowdeGetResponse200 = {
  data: KnowdeSearchResult;
  status: 200;
};

export type searchByTextKnowdeGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type searchByTextKnowdeGetResponseComposite =
  | searchByTextKnowdeGetResponse200
  | searchByTextKnowdeGetResponse422;

export type searchByTextKnowdeGetResponse =
  searchByTextKnowdeGetResponseComposite & {
    headers: Headers;
  };

export const getSearchByTextKnowdeGetUrl = (
  params?: SearchByTextKnowdeGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://knowde.onrender.com/knowde/?${stringifiedParams}`
    : "https://knowde.onrender.com/knowde/";
};

export const searchByTextKnowdeGet = async (
  params?: SearchByTextKnowdeGetParams,
  options?: RequestInit,
): Promise<searchByTextKnowdeGetResponse> => {
  const res = await fetch(getSearchByTextKnowdeGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: searchByTextKnowdeGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as searchByTextKnowdeGetResponse;
};

export const getSearchByTextKnowdeGetKey = (
  params?: SearchByTextKnowdeGetParams,
) =>
  ["https://knowde.onrender.com/knowde/", ...(params ? [params] : [])] as const;

export type SearchByTextKnowdeGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchByTextKnowdeGet>>
>;
export type SearchByTextKnowdeGetQueryError = Promise<HTTPValidationError>;

/**
 * @summary Search By Text
 */
export const useSearchByTextKnowdeGet = <TError = Promise<HTTPValidationError>>(
  params?: SearchByTextKnowdeGetParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof searchByTextKnowdeGet>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    fetch?: RequestInit;
  },
) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getSearchByTextKnowdeGetKey(params) : null));
  const swrFn = () => searchByTextKnowdeGet(params, fetchOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * knowde詳細.
 * @summary Detail
 */
export type detailKnowdeSentenceSentenceIdGetResponse200 = {
  data: KnowdeDetail;
  status: 200;
};

export type detailKnowdeSentenceSentenceIdGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type detailKnowdeSentenceSentenceIdGetResponseComposite =
  | detailKnowdeSentenceSentenceIdGetResponse200
  | detailKnowdeSentenceSentenceIdGetResponse422;

export type detailKnowdeSentenceSentenceIdGetResponse =
  detailKnowdeSentenceSentenceIdGetResponseComposite & {
    headers: Headers;
  };

export const getDetailKnowdeSentenceSentenceIdGetUrl = (sentenceId: string) => {
  return `https://knowde.onrender.com/knowde/sentence/${sentenceId}`;
};

export const detailKnowdeSentenceSentenceIdGet = async (
  sentenceId: string,
  options?: RequestInit,
): Promise<detailKnowdeSentenceSentenceIdGetResponse> => {
  const res = await fetch(getDetailKnowdeSentenceSentenceIdGetUrl(sentenceId), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: detailKnowdeSentenceSentenceIdGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as detailKnowdeSentenceSentenceIdGetResponse;
};

export const getDetailKnowdeSentenceSentenceIdGetKey = (sentenceId: string) =>
  [`https://knowde.onrender.com/knowde/sentence/${sentenceId}`] as const;

export type DetailKnowdeSentenceSentenceIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof detailKnowdeSentenceSentenceIdGet>>
>;
export type DetailKnowdeSentenceSentenceIdGetQueryError =
  Promise<HTTPValidationError>;

/**
 * @summary Detail
 */
export const useDetailKnowdeSentenceSentenceIdGet = <
  TError = Promise<HTTPValidationError>,
>(
  sentenceId: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof detailKnowdeSentenceSentenceIdGet>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    fetch?: RequestInit;
  },
) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!sentenceId;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled ? getDetailKnowdeSentenceSentenceIdGetKey(sentenceId) : null);
  const swrFn = () =>
    detailKnowdeSentenceSentenceIdGet(sentenceId, fetchOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
