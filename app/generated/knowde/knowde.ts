/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import type {
  HTTPValidationError,
  KAdjacency,
  SearchByTextKnowdeGetParams,
} from "../fastAPI.schemas";

/**
 * 文字列検索.
 * @summary Search By Text
 */
export type searchByTextKnowdeGetResponse200 = {
  data: KAdjacency[];
  status: 200;
};

export type searchByTextKnowdeGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type searchByTextKnowdeGetResponseComposite =
  | searchByTextKnowdeGetResponse200
  | searchByTextKnowdeGetResponse422;

export type searchByTextKnowdeGetResponse =
  searchByTextKnowdeGetResponseComposite & {
    headers: Headers;
  };

export const getSearchByTextKnowdeGetUrl = (
  params?: SearchByTextKnowdeGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/knowde/?${stringifiedParams}`
    : "http://localhost:8000/knowde/";
};

export const searchByTextKnowdeGet = async (
  params?: SearchByTextKnowdeGetParams,
  options?: RequestInit,
): Promise<searchByTextKnowdeGetResponse> => {
  const res = await fetch(getSearchByTextKnowdeGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: searchByTextKnowdeGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as searchByTextKnowdeGetResponse;
};
