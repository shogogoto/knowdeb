/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type {
  Deduction,
  DeductionMapper,
  StatsDeductions,
} from "../fastAPI.schemas";

export const getListDeductionsDeductionGetResponseMock = (
  overrideResponse: Partial<StatsDeductions> = {},
): StatsDeductions => ({
  values: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      deduction: {
        uid: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.uuid(), null]),
          undefined,
        ]),
        created: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
        text: faker.string.alpha(20),
        premises: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            uid: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.uuid(), null]),
              undefined,
            ]),
            created: `${faker.date.past().toISOString().split(".")[0]}Z`,
            updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
            text: faker.string.alpha(20),
          })),
          undefined,
        ]),
        conclusion: {
          uid: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
          ]),
          created: `${faker.date.past().toISOString().split(".")[0]}Z`,
          updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
          text: faker.string.alpha(20),
        },
        valid: faker.datatype.boolean(),
      },
      stats: {
        n_src: faker.number.int({ min: undefined, max: undefined }),
        n_dest: faker.number.int({ min: undefined, max: undefined }),
        n_axiom: faker.number.int({ min: undefined, max: undefined }),
        n_leaf: faker.number.int({ min: undefined, max: undefined }),
        max_axiom_dist: faker.number.int({ min: undefined, max: undefined }),
        max_leaf_dist: faker.number.int({ min: undefined, max: undefined }),
      },
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeductDeductionPostResponseMock = (
  overrideResponse: Partial<Deduction> = {},
): Deduction => ({
  uid: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  text: faker.string.alpha(20),
  premises: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      uid: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
      ]),
      created: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
      text: faker.string.alpha(20),
    })),
    undefined,
  ]),
  conclusion: {
    uid: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    text: faker.string.alpha(20),
  },
  valid: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getCompleteDeductionMapperDeductionCompletionGetResponseMock = (
  overrideResponse: Partial<DeductionMapper> = {},
): DeductionMapper => ({
  uid: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  valid: faker.datatype.boolean(),
  text: faker.string.alpha(20),
  ...overrideResponse,
});

export const getReplacePremisesDeductionUidPremisesPutResponseMock = (
  overrideResponse: Partial<Deduction> = {},
): Deduction => ({
  uid: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  text: faker.string.alpha(20),
  premises: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      uid: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
      ]),
      created: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
      text: faker.string.alpha(20),
    })),
    undefined,
  ]),
  conclusion: {
    uid: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    text: faker.string.alpha(20),
  },
  valid: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getReplaceConclusionDeductionUidConclusionPutResponseMock = (
  overrideResponse: Partial<Deduction> = {},
): Deduction => ({
  uid: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  text: faker.string.alpha(20),
  premises: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      uid: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
      ]),
      created: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
      text: faker.string.alpha(20),
    })),
    undefined,
  ]),
  conclusion: {
    uid: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    text: faker.string.alpha(20),
  },
  valid: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getListDeductionsDeductionGetMockHandler = (
  overrideResponse?:
    | StatsDeductions
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StatsDeductions> | StatsDeductions),
) => {
  return http.get("*/deduction", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListDeductionsDeductionGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeductDeductionPostMockHandler = (
  overrideResponse?:
    | Deduction
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Deduction> | Deduction),
) => {
  return http.post("*/deduction", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeductDeductionPostResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCompleteDeductionMapperDeductionCompletionGetMockHandler = (
  overrideResponse?:
    | DeductionMapper
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<DeductionMapper> | DeductionMapper),
) => {
  return http.get("*/deduction/completion", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCompleteDeductionMapperDeductionCompletionGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getRemoveDeductionDeductionUidDeleteMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/deduction/:uid", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getReplacePremisesDeductionUidPremisesPutMockHandler = (
  overrideResponse?:
    | Deduction
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<Deduction> | Deduction),
) => {
  return http.put("*/deduction/:uid/premises", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getReplacePremisesDeductionUidPremisesPutResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getReplaceConclusionDeductionUidConclusionPutMockHandler = (
  overrideResponse?:
    | Deduction
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<Deduction> | Deduction),
) => {
  return http.put("*/deduction/:uid/conclusion", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getReplaceConclusionDeductionUidConclusionPutResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getDeductionMock = () => [
  getListDeductionsDeductionGetMockHandler(),
  getDeductDeductionPostMockHandler(),
  getCompleteDeductionMapperDeductionCompletionGetMockHandler(),
  getRemoveDeductionDeductionUidDeleteMockHandler(),
  getReplacePremisesDeductionUidPremisesPutMockHandler(),
  getReplaceConclusionDeductionUidConclusionPutMockHandler(),
];
