/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import type {
  CompleteDeductionMapperDeductionCompletionGetParams,
  Deduction,
  DeductionMapper,
  DeductionParam,
  HTTPValidationError,
  ReplaceConclusionAPIParam,
  ReplacePremisesAPIParam,
  StatsDeductions,
} from "../fastAPI.schemas";

/**
 * 演繹一覧.
 * @summary List Deductions
 */
export type listDeductionsDeductionGetResponse200 = {
  data: StatsDeductions;
  status: 200;
};

export type listDeductionsDeductionGetResponseComposite =
  listDeductionsDeductionGetResponse200;

export type listDeductionsDeductionGetResponse =
  listDeductionsDeductionGetResponseComposite & {
    headers: Headers;
  };

export const getListDeductionsDeductionGetUrl = () => {
  return "http://localhost:8000/deduction";
};

export const listDeductionsDeductionGet = async (
  options?: RequestInit,
): Promise<listDeductionsDeductionGetResponse> => {
  const res = await fetch(getListDeductionsDeductionGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: listDeductionsDeductionGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as listDeductionsDeductionGetResponse;
};

/**
 * @summary Deduct
 */
export type deductDeductionPostResponse201 = {
  data: Deduction;
  status: 201;
};

export type deductDeductionPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deductDeductionPostResponseComposite =
  | deductDeductionPostResponse201
  | deductDeductionPostResponse422;

export type deductDeductionPostResponse =
  deductDeductionPostResponseComposite & {
    headers: Headers;
  };

export const getDeductDeductionPostUrl = () => {
  return "http://localhost:8000/deduction";
};

export const deductDeductionPost = async (
  deductionParam: DeductionParam,
  options?: RequestInit,
): Promise<deductDeductionPostResponse> => {
  const res = await fetch(getDeductDeductionPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(deductionParam),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: deductDeductionPostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as deductDeductionPostResponse;
};

/**
 * 補完.
 * @summary Complete Deduction Mapper
 */
export type completeDeductionMapperDeductionCompletionGetResponse200 = {
  data: DeductionMapper;
  status: 200;
};

export type completeDeductionMapperDeductionCompletionGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type completeDeductionMapperDeductionCompletionGetResponseComposite =
  | completeDeductionMapperDeductionCompletionGetResponse200
  | completeDeductionMapperDeductionCompletionGetResponse422;

export type completeDeductionMapperDeductionCompletionGetResponse =
  completeDeductionMapperDeductionCompletionGetResponseComposite & {
    headers: Headers;
  };

export const getCompleteDeductionMapperDeductionCompletionGetUrl = (
  params: CompleteDeductionMapperDeductionCompletionGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/deduction/completion?${stringifiedParams}`
    : "http://localhost:8000/deduction/completion";
};

export const completeDeductionMapperDeductionCompletionGet = async (
  params: CompleteDeductionMapperDeductionCompletionGetParams,
  options?: RequestInit,
): Promise<completeDeductionMapperDeductionCompletionGetResponse> => {
  const res = await fetch(
    getCompleteDeductionMapperDeductionCompletionGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: completeDeductionMapperDeductionCompletionGetResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as completeDeductionMapperDeductionCompletionGetResponse;
};

/**
 * 演繹の削除.
 * @summary Remove Deduction
 */
export type removeDeductionDeductionUidDeleteResponse204 = {
  data: undefined;
  status: 204;
};

export type removeDeductionDeductionUidDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type removeDeductionDeductionUidDeleteResponseComposite =
  | removeDeductionDeductionUidDeleteResponse204
  | removeDeductionDeductionUidDeleteResponse422;

export type removeDeductionDeductionUidDeleteResponse =
  removeDeductionDeductionUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getRemoveDeductionDeductionUidDeleteUrl = (uid: string) => {
  return `http://localhost:8000/deduction/${uid}`;
};

export const removeDeductionDeductionUidDelete = async (
  uid: string,
  options?: RequestInit,
): Promise<removeDeductionDeductionUidDeleteResponse> => {
  const res = await fetch(getRemoveDeductionDeductionUidDeleteUrl(uid), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: removeDeductionDeductionUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as removeDeductionDeductionUidDeleteResponse;
};

/**
 * @summary Replace Premises
 */
export type replacePremisesDeductionUidPremisesPutResponse200 = {
  data: Deduction;
  status: 200;
};

export type replacePremisesDeductionUidPremisesPutResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type replacePremisesDeductionUidPremisesPutResponseComposite =
  | replacePremisesDeductionUidPremisesPutResponse200
  | replacePremisesDeductionUidPremisesPutResponse422;

export type replacePremisesDeductionUidPremisesPutResponse =
  replacePremisesDeductionUidPremisesPutResponseComposite & {
    headers: Headers;
  };

export const getReplacePremisesDeductionUidPremisesPutUrl = (uid: string) => {
  return `http://localhost:8000/deduction/${uid}/premises`;
};

export const replacePremisesDeductionUidPremisesPut = async (
  uid: string,
  replacePremisesAPIParam: ReplacePremisesAPIParam,
  options?: RequestInit,
): Promise<replacePremisesDeductionUidPremisesPutResponse> => {
  const res = await fetch(getReplacePremisesDeductionUidPremisesPutUrl(uid), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(replacePremisesAPIParam),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: replacePremisesDeductionUidPremisesPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as replacePremisesDeductionUidPremisesPutResponse;
};

/**
 * @summary Replace Conclusion
 */
export type replaceConclusionDeductionUidConclusionPutResponse200 = {
  data: Deduction;
  status: 200;
};

export type replaceConclusionDeductionUidConclusionPutResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type replaceConclusionDeductionUidConclusionPutResponseComposite =
  | replaceConclusionDeductionUidConclusionPutResponse200
  | replaceConclusionDeductionUidConclusionPutResponse422;

export type replaceConclusionDeductionUidConclusionPutResponse =
  replaceConclusionDeductionUidConclusionPutResponseComposite & {
    headers: Headers;
  };

export const getReplaceConclusionDeductionUidConclusionPutUrl = (
  uid: string,
) => {
  return `http://localhost:8000/deduction/${uid}/conclusion`;
};

export const replaceConclusionDeductionUidConclusionPut = async (
  uid: string,
  replaceConclusionAPIParam: ReplaceConclusionAPIParam,
  options?: RequestInit,
): Promise<replaceConclusionDeductionUidConclusionPutResponse> => {
  const res = await fetch(
    getReplaceConclusionDeductionUidConclusionPutUrl(uid),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(replaceConclusionAPIParam),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: replaceConclusionDeductionUidConclusionPutResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as replaceConclusionDeductionUidConclusionPutResponse;
};
