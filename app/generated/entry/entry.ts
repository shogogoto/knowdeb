/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import useSwr from "swr";
import type { Key, SWRConfiguration } from "swr";

import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import type {
  HTTPValidationError,
  NameSpace,
  ResourceMetas,
} from "../fastAPI.schemas";

/**
 * ユーザーの名前空間.
 * @summary Get Namaspace
 */
export type getNamaspaceNamespaceGetResponse200 = {
  data: NameSpace;
  status: 200;
};

export type getNamaspaceNamespaceGetResponseComposite =
  getNamaspaceNamespaceGetResponse200;

export type getNamaspaceNamespaceGetResponse =
  getNamaspaceNamespaceGetResponseComposite & {
    headers: Headers;
  };

export const getGetNamaspaceNamespaceGetUrl = () => {
  return "https://knowde.onrender.com/namespace";
};

export const getNamaspaceNamespaceGet = async (
  options?: RequestInit,
): Promise<getNamaspaceNamespaceGetResponse> => {
  const res = await fetch(getGetNamaspaceNamespaceGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getNamaspaceNamespaceGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getNamaspaceNamespaceGetResponse;
};

export const getGetNamaspaceNamespaceGetKey = () =>
  ["https://knowde.onrender.com/namespace"] as const;

export type GetNamaspaceNamespaceGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNamaspaceNamespaceGet>>
>;
export type GetNamaspaceNamespaceGetQueryError = Promise<unknown>;

/**
 * @summary Get Namaspace
 */
export const useGetNamaspaceNamespaceGet = <
  TError = Promise<unknown>,
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof getNamaspaceNamespaceGet>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  fetch?: RequestInit;
}) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetNamaspaceNamespaceGetKey() : null));
  const swrFn = () => getNamaspaceNamespaceGet(fetchOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * ファイルシステムと同期.
 * @summary Sync Paths
 */
export type syncPathsNamespacePostResponse200 = {
  data: string[];
  status: 200;
};

export type syncPathsNamespacePostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type syncPathsNamespacePostResponseComposite =
  | syncPathsNamespacePostResponse200
  | syncPathsNamespacePostResponse422;

export type syncPathsNamespacePostResponse =
  syncPathsNamespacePostResponseComposite & {
    headers: Headers;
  };

export const getSyncPathsNamespacePostUrl = () => {
  return "https://knowde.onrender.com/namespace";
};

export const syncPathsNamespacePost = async (
  resourceMetas: ResourceMetas,
  options?: RequestInit,
): Promise<syncPathsNamespacePostResponse> => {
  const res = await fetch(getSyncPathsNamespacePostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(resourceMetas),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: syncPathsNamespacePostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as syncPathsNamespacePostResponse;
};

export const getSyncPathsNamespacePostMutationFetcher = (
  options?: RequestInit,
) => {
  return (
    _: Key,
    { arg }: { arg: ResourceMetas },
  ): Promise<syncPathsNamespacePostResponse> => {
    return syncPathsNamespacePost(arg, options);
  };
};
export const getSyncPathsNamespacePostMutationKey = () =>
  ["https://knowde.onrender.com/namespace"] as const;

export type SyncPathsNamespacePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof syncPathsNamespacePost>>
>;
export type SyncPathsNamespacePostMutationError = Promise<HTTPValidationError>;

/**
 * @summary Sync Paths
 */
export const useSyncPathsNamespacePost = <
  TError = Promise<HTTPValidationError>,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof syncPathsNamespacePost>>,
    TError,
    Key,
    ResourceMetas,
    Awaited<ReturnType<typeof syncPathsNamespacePost>>
  > & { swrKey?: string };
  fetch?: RequestInit;
}) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getSyncPathsNamespacePostMutationKey();
  const swrFn = getSyncPathsNamespacePostMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
