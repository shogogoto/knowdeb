/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import type {
  HTTPValidationError,
  NameSpace,
  ResourceMetas,
} from "../fastAPI.schemas";

/**
 * ユーザーの名前空間.
 * @summary Get Namaspace
 */
export type getNamaspaceNamespaceGetResponse200 = {
  data: NameSpace;
  status: 200;
};

export type getNamaspaceNamespaceGetResponseComposite =
  getNamaspaceNamespaceGetResponse200;

export type getNamaspaceNamespaceGetResponse =
  getNamaspaceNamespaceGetResponseComposite & {
    headers: Headers;
  };

export const getGetNamaspaceNamespaceGetUrl = () => {
  return "https://knowde.onrender.com/namespace";
};

export const getNamaspaceNamespaceGet = async (
  options?: RequestInit,
): Promise<getNamaspaceNamespaceGetResponse> => {
  const res = await fetch(getGetNamaspaceNamespaceGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getNamaspaceNamespaceGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getNamaspaceNamespaceGetResponse;
};

/**
 * ファイルシステムと同期.
 * @summary Sync Paths
 */
export type syncPathsNamespacePostResponse200 = {
  data: string[];
  status: 200;
};

export type syncPathsNamespacePostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type syncPathsNamespacePostResponseComposite =
  | syncPathsNamespacePostResponse200
  | syncPathsNamespacePostResponse422;

export type syncPathsNamespacePostResponse =
  syncPathsNamespacePostResponseComposite & {
    headers: Headers;
  };

export const getSyncPathsNamespacePostUrl = () => {
  return "https://knowde.onrender.com/namespace";
};

export const syncPathsNamespacePost = async (
  resourceMetas: ResourceMetas,
  options?: RequestInit,
): Promise<syncPathsNamespacePostResponse> => {
  const res = await fetch(getSyncPathsNamespacePostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(resourceMetas),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: syncPathsNamespacePostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as syncPathsNamespacePostResponse;
};
