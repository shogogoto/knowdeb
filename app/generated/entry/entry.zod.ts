/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * „É¶„Éº„Ç∂„Éº„ÅÆÂêçÂâçÁ©∫Èñì.
 * @summary Get Namaspace
 */
export const getNamaspaceNamespaceGetResponse = zod
  .object({
    g: zod
      .object({
        directed: zod.boolean(),
        edges: zod.array(
          zod
            .object({
              type: zod
                .enum([
                  "head",
                  "sibling",
                  "below",
                  "def",
                  "resolved",
                  "quoterm",
                  "to",
                  "example",
                  "when",
                  "where",
                  "num",
                  "by",
                  "ref",
                  "anti",
                  "similar",
                ])
                .describe("„Ç∞„É©„ÉïÈñ¢‰øÇ„ÅÆÁ®ÆÈ°û."),
              source: zod.string(),
              target: zod.string(),
              key: zod.number(),
            })
            .describe("for fastapi schema."),
        ),
        graph: zod.record(zod.string(), zod.any()),
        multigraph: zod.boolean(),
        nodes: zod.array(zod.record(zod.string(), zod.string())),
      })
      .optional()
      .describe("for fastapi schema."),
    roots_: zod.record(
      zod.string(),
      zod
        .object({
          name: zod.string(),
          element_id_property: zod.string().or(zod.null()).optional(),
          uid: zod.string().uuid(),
        })
        .describe("namespaceÁî®„ÅÆhashable„Å™Ë°®Áèæ."),
    ),
    user_id: zod.string().uuid(),
  })
  .describe("„É™„ÇΩ„Éº„Çπ„ÅÆÂàÜÈ°û.");

/**
 * „Éï„Ç°„Ç§„É´„Ç∑„Çπ„ÉÜ„É†„Å®ÂêåÊúü.
 * @summary Sync Namespace Api
 */
export const syncNamespaceApiNamespacePostBodyItem = zod
  .object({
    title: zod.string(),
    authors: zod.array(zod.string()).optional(),
    published: zod.string().date().or(zod.null()).optional(),
    urls: zod.array(zod.string().url().min(1)).optional(),
    path: zod.array(zod.string()).min(1).or(zod.null()).optional(),
    updated: zod.string().datetime({}).or(zod.null()).optional(),
    txt_hash: zod.number().or(zod.null()).optional(),
  })
  .describe("„É™„ÇΩ„Éº„Çπ„É°„ÇøÊÉÖÂ†±.");
export const syncNamespaceApiNamespacePostBody = zod.array(
  syncNamespaceApiNamespacePostBodyItem,
);

export const syncNamespaceApiNamespacePostResponseItem = zod.string();
export const syncNamespaceApiNamespacePostResponse = zod.array(
  syncNamespaceApiNamespacePostResponseItem,
);

/**
 * „ÉÜ„Ç≠„Çπ„Éà„Åã„Çâsysnet„ÇíË™≠„ÅøÂèñ„Å£„Å¶Ê∞∏Á∂öÂåñ.
 * @summary Post Text
 */
export const postTextResourceTextPostBody = zod.object({
  txt: zod.string(),
  path: zod.array(zod.string()),
});

export const postTextResourceTextPostResponse = zod.record(
  zod.string(),
  zod.string(),
);

/**
 * „Éï„Ç°„Ç§„É´„Åã„Çâsysnet„ÇíË™≠„ÅøÂèñ„Å£„Å¶Ê∞∏Á∂öÂåñ.
 * @summary Post Files
 */
export const postFilesResourcePostBody = zod.object({
  files: zod.array(zod.instanceof(File)),
});

export const postFilesResourcePostResponse = zod.null();

/**
 * „É™„ÇΩ„Éº„ÇπË©≥Á¥∞.
 * @summary Get Resource Detail
 */
export const getResourceDetailResourceResourceIdGetParams = zod.object({
  resource_id: zod.string(),
});

export const getResourceDetailResourceResourceIdGetResponseOwnerUserDisplayNameMaxOne = 32;
export const getResourceDetailResourceResourceIdGetResponseOwnerUserProfileMaxOne = 160;
export const getResourceDetailResourceResourceIdGetResponseOwnerUserUsernameMaxOne = 16;
export const getResourceDetailResourceResourceIdGetResponseOwnerUserUsernameRegExpOne =
  /^[a-zA-Z0-9_-]+$/;

export const getResourceDetailResourceResourceIdGetResponse = zod
  .object({
    network: zod
      .object({
        root: zod.string(),
        g: zod
          .object({
            directed: zod.boolean(),
            edges: zod.array(
              zod
                .object({
                  type: zod
                    .enum([
                      "head",
                      "sibling",
                      "below",
                      "def",
                      "resolved",
                      "quoterm",
                      "to",
                      "example",
                      "when",
                      "where",
                      "num",
                      "by",
                      "ref",
                      "anti",
                      "similar",
                    ])
                    .describe("„Ç∞„É©„ÉïÈñ¢‰øÇ„ÅÆÁ®ÆÈ°û."),
                  source: zod.string(),
                  target: zod.string(),
                  key: zod.number(),
                })
                .describe("for fastapi schema."),
            ),
            graph: zod.record(zod.string(), zod.any()),
            multigraph: zod.boolean(),
            nodes: zod.array(zod.record(zod.string(), zod.string())),
          })
          .optional()
          .describe("for fastapi schema."),
      })
      .describe("Á≥ª„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ."),
    owner: zod
      .object({
        user: zod
          .object({
            display_name: zod
              .string()
              .max(
                getResourceDetailResourceResourceIdGetResponseOwnerUserDisplayNameMaxOne,
              )
              .or(zod.null())
              .optional(),
            profile: zod
              .string()
              .max(
                getResourceDetailResourceResourceIdGetResponseOwnerUserProfileMaxOne,
              )
              .or(zod.null())
              .optional(),
            avatar_url: zod.string().or(zod.null()).optional(),
            username: zod
              .string()
              .max(
                getResourceDetailResourceResourceIdGetResponseOwnerUserUsernameMaxOne,
              )
              .regex(
                getResourceDetailResourceResourceIdGetResponseOwnerUserUsernameRegExpOne,
              )
              .or(zod.null())
              .optional()
              .describe(
                "ÂçäËßíËã±Êï∞Â≠ó„Å®„Éè„Ç§„Éï„É≥„ÄÅ„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ",
              ),
            uid: zod.string().uuid(),
            created: zod.string().datetime({}),
          })
          .describe("ÂÖ¨Èñã„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±."),
        resource: zod
          .object({
            name: zod.string(),
            element_id_property: zod.string().or(zod.null()).optional(),
            uid: zod.string().uuid(),
            authors: zod.array(zod.string()).or(zod.null()).optional(),
            published: zod.string().date().or(zod.null()).optional(),
            urls: zod
              .array(zod.string().url().min(1))
              .or(zod.null())
              .optional(),
            path: zod.array(zod.string()).or(zod.null()).optional(),
            updated: zod.string().datetime({}).or(zod.null()).optional(),
            txt_hash: zod.number().or(zod.null()).optional(),
          })
          .describe("LResource„ÅÆOGM, „É™„ÇΩ„Éº„Çπ„ÅÆ„É°„ÇøÊÉÖÂ†±."),
      })
      .describe("„É™„ÇΩ„Éº„Çπ„ÅÆÊâÄÊúâËÄÖ."),
  })
  .describe("„É™„ÇΩ„Éº„ÇπË©≥Á¥∞(API Return TypeÁî®).");
