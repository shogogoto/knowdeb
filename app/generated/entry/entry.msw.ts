/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type { NameSpace } from "../fastAPI.schemas";

export const getGetNamaspaceNamespaceGetResponseMock = (
  overrideResponse: Partial<NameSpace> = {},
): NameSpace => ({
  g: faker.helpers.arrayElement([
    {
      directed: faker.datatype.boolean(),
      edges: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        type: faker.helpers.arrayElement([
          1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        ] as const),
        source: faker.string.alpha(20),
        target: faker.string.alpha(20),
        key: faker.number.int({ min: undefined, max: undefined }),
      })),
      graph: {},
      multigraph: faker.datatype.boolean(),
      nodes: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        [faker.string.alphanumeric(5)]: faker.string.alpha(20),
      })),
    },
    undefined,
  ]),
  roots_: {
    [faker.string.alphanumeric(5)]: {
      name: faker.string.alpha(20),
      element_id_property: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      uid: faker.string.uuid(),
    },
  },
  user_id: faker.string.uuid(),
  ...overrideResponse,
});

export const getSyncPathsNamespacePostResponseMock = (): string[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
    faker.word.sample(),
  );

export const getGetNamaspaceNamespaceGetMockHandler = (
  overrideResponse?:
    | NameSpace
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<NameSpace> | NameSpace),
) => {
  return http.get("*/namespace", async (info) => {
    await delay(200);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetNamaspaceNamespaceGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSyncPathsNamespacePostMockHandler = (
  overrideResponse?:
    | string[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<string[]> | string[]),
) => {
  return http.post("*/namespace", async (info) => {
    await delay(200);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSyncPathsNamespacePostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getEntryMock = () => [
  getGetNamaspaceNamespaceGetMockHandler(),
  getSyncPathsNamespacePostMockHandler(),
];
