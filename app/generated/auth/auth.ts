/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import useSwr from "swr";
import type { Arguments, Key, SWRConfiguration } from "swr";

import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import type {
  BearerResponse,
  BodyAuthJwtLoginAuthJwtLoginPost,
  BodyResetForgotPasswordAuthForgotPasswordPost,
  BodyResetResetPasswordAuthResetPasswordPost,
  BodyVerifyRequestTokenAuthRequestVerifyTokenPost,
  BodyVerifyVerifyAuthVerifyPost,
  ErrorModel,
  HTTPValidationError,
  OAuth2AuthorizeResponse,
  OauthGoogleJwtAuthorizeGoogleAuthorizeGetParams,
  OauthGoogleJwtCallbackGoogleCallbackGetParams,
  UserCreate,
  UserRead,
} from "../fastAPI.schemas";

/**
 * @summary Auth:Jwt.Login
 */
export type authJwtLoginAuthJwtLoginPostResponse200 = {
  data: BearerResponse;
  status: 200;
};

export type authJwtLoginAuthJwtLoginPostResponse400 = {
  data: ErrorModel;
  status: 400;
};

export type authJwtLoginAuthJwtLoginPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type authJwtLoginAuthJwtLoginPostResponseComposite =
  | authJwtLoginAuthJwtLoginPostResponse200
  | authJwtLoginAuthJwtLoginPostResponse400
  | authJwtLoginAuthJwtLoginPostResponse422;

export type authJwtLoginAuthJwtLoginPostResponse =
  authJwtLoginAuthJwtLoginPostResponseComposite & {
    headers: Headers;
  };

export const getAuthJwtLoginAuthJwtLoginPostUrl = () => {
  return "https://knowde.onrender.com/auth/jwt/login";
};

export const authJwtLoginAuthJwtLoginPost = async (
  bodyAuthJwtLoginAuthJwtLoginPost: BodyAuthJwtLoginAuthJwtLoginPost,
  options?: RequestInit,
): Promise<authJwtLoginAuthJwtLoginPostResponse> => {
  const formUrlEncoded = new URLSearchParams();
  if (
    bodyAuthJwtLoginAuthJwtLoginPost.grant_type !== undefined &&
    bodyAuthJwtLoginAuthJwtLoginPost.grant_type !== null
  ) {
    formUrlEncoded.append(
      "grant_type",
      bodyAuthJwtLoginAuthJwtLoginPost.grant_type,
    );
  }
  formUrlEncoded.append("username", bodyAuthJwtLoginAuthJwtLoginPost.username);
  formUrlEncoded.append("password", bodyAuthJwtLoginAuthJwtLoginPost.password);
  if (bodyAuthJwtLoginAuthJwtLoginPost.scope !== undefined) {
    formUrlEncoded.append("scope", bodyAuthJwtLoginAuthJwtLoginPost.scope);
  }
  if (
    bodyAuthJwtLoginAuthJwtLoginPost.client_id !== undefined &&
    bodyAuthJwtLoginAuthJwtLoginPost.client_id !== null
  ) {
    formUrlEncoded.append(
      "client_id",
      bodyAuthJwtLoginAuthJwtLoginPost.client_id,
    );
  }
  if (
    bodyAuthJwtLoginAuthJwtLoginPost.client_secret !== undefined &&
    bodyAuthJwtLoginAuthJwtLoginPost.client_secret !== null
  ) {
    formUrlEncoded.append(
      "client_secret",
      bodyAuthJwtLoginAuthJwtLoginPost.client_secret,
    );
  }

  const res = await fetch(getAuthJwtLoginAuthJwtLoginPostUrl(), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    body: formUrlEncoded,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: authJwtLoginAuthJwtLoginPostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as authJwtLoginAuthJwtLoginPostResponse;
};

export const getAuthJwtLoginAuthJwtLoginPostMutationFetcher = (
  options?: RequestInit,
) => {
  return (
    _: Key,
    { arg }: { arg: BodyAuthJwtLoginAuthJwtLoginPost },
  ): Promise<authJwtLoginAuthJwtLoginPostResponse> => {
    return authJwtLoginAuthJwtLoginPost(arg, options);
  };
};
export const getAuthJwtLoginAuthJwtLoginPostMutationKey = () =>
  ["https://knowde.onrender.com/auth/jwt/login"] as const;

export type AuthJwtLoginAuthJwtLoginPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof authJwtLoginAuthJwtLoginPost>>
>;
export type AuthJwtLoginAuthJwtLoginPostMutationError = Promise<
  ErrorModel | HTTPValidationError
>;

/**
 * @summary Auth:Jwt.Login
 */
export const useAuthJwtLoginAuthJwtLoginPost = <
  TError = Promise<ErrorModel | HTTPValidationError>,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof authJwtLoginAuthJwtLoginPost>>,
    TError,
    Key,
    BodyAuthJwtLoginAuthJwtLoginPost,
    Awaited<ReturnType<typeof authJwtLoginAuthJwtLoginPost>>
  > & { swrKey?: string };
  fetch?: RequestInit;
}) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getAuthJwtLoginAuthJwtLoginPostMutationKey();
  const swrFn = getAuthJwtLoginAuthJwtLoginPostMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Auth:Jwt.Logout
 */
export type authJwtLogoutAuthJwtLogoutPostResponse200 = {
  data: unknown;
  status: 200;
};

export type authJwtLogoutAuthJwtLogoutPostResponse401 = {
  data: undefined;
  status: 401;
};

export type authJwtLogoutAuthJwtLogoutPostResponseComposite =
  | authJwtLogoutAuthJwtLogoutPostResponse200
  | authJwtLogoutAuthJwtLogoutPostResponse401;

export type authJwtLogoutAuthJwtLogoutPostResponse =
  authJwtLogoutAuthJwtLogoutPostResponseComposite & {
    headers: Headers;
  };

export const getAuthJwtLogoutAuthJwtLogoutPostUrl = () => {
  return "https://knowde.onrender.com/auth/jwt/logout";
};

export const authJwtLogoutAuthJwtLogoutPost = async (
  options?: RequestInit,
): Promise<authJwtLogoutAuthJwtLogoutPostResponse> => {
  const res = await fetch(getAuthJwtLogoutAuthJwtLogoutPostUrl(), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: authJwtLogoutAuthJwtLogoutPostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as authJwtLogoutAuthJwtLogoutPostResponse;
};

export const getAuthJwtLogoutAuthJwtLogoutPostMutationFetcher = (
  options?: RequestInit,
) => {
  return (
    _: Key,
    __: { arg: Arguments },
  ): Promise<authJwtLogoutAuthJwtLogoutPostResponse> => {
    return authJwtLogoutAuthJwtLogoutPost(options);
  };
};
export const getAuthJwtLogoutAuthJwtLogoutPostMutationKey = () =>
  ["https://knowde.onrender.com/auth/jwt/logout"] as const;

export type AuthJwtLogoutAuthJwtLogoutPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof authJwtLogoutAuthJwtLogoutPost>>
>;
export type AuthJwtLogoutAuthJwtLogoutPostMutationError = Promise<void>;

/**
 * @summary Auth:Jwt.Logout
 */
export const useAuthJwtLogoutAuthJwtLogoutPost = <
  TError = Promise<void>,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof authJwtLogoutAuthJwtLogoutPost>>,
    TError,
    Key,
    Arguments,
    Awaited<ReturnType<typeof authJwtLogoutAuthJwtLogoutPost>>
  > & { swrKey?: string };
  fetch?: RequestInit;
}) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getAuthJwtLogoutAuthJwtLogoutPostMutationKey();
  const swrFn = getAuthJwtLogoutAuthJwtLogoutPostMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Register:Register
 */
export type registerRegisterAuthRegisterPostResponse201 = {
  data: UserRead;
  status: 201;
};

export type registerRegisterAuthRegisterPostResponse400 = {
  data: ErrorModel;
  status: 400;
};

export type registerRegisterAuthRegisterPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type registerRegisterAuthRegisterPostResponseComposite =
  | registerRegisterAuthRegisterPostResponse201
  | registerRegisterAuthRegisterPostResponse400
  | registerRegisterAuthRegisterPostResponse422;

export type registerRegisterAuthRegisterPostResponse =
  registerRegisterAuthRegisterPostResponseComposite & {
    headers: Headers;
  };

export const getRegisterRegisterAuthRegisterPostUrl = () => {
  return "https://knowde.onrender.com/auth/register";
};

export const registerRegisterAuthRegisterPost = async (
  userCreate: UserCreate,
  options?: RequestInit,
): Promise<registerRegisterAuthRegisterPostResponse> => {
  const res = await fetch(getRegisterRegisterAuthRegisterPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userCreate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: registerRegisterAuthRegisterPostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as registerRegisterAuthRegisterPostResponse;
};

export const getRegisterRegisterAuthRegisterPostMutationFetcher = (
  options?: RequestInit,
) => {
  return (
    _: Key,
    { arg }: { arg: UserCreate },
  ): Promise<registerRegisterAuthRegisterPostResponse> => {
    return registerRegisterAuthRegisterPost(arg, options);
  };
};
export const getRegisterRegisterAuthRegisterPostMutationKey = () =>
  ["https://knowde.onrender.com/auth/register"] as const;

export type RegisterRegisterAuthRegisterPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerRegisterAuthRegisterPost>>
>;
export type RegisterRegisterAuthRegisterPostMutationError = Promise<
  ErrorModel | HTTPValidationError
>;

/**
 * @summary Register:Register
 */
export const useRegisterRegisterAuthRegisterPost = <
  TError = Promise<ErrorModel | HTTPValidationError>,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof registerRegisterAuthRegisterPost>>,
    TError,
    Key,
    UserCreate,
    Awaited<ReturnType<typeof registerRegisterAuthRegisterPost>>
  > & { swrKey?: string };
  fetch?: RequestInit;
}) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getRegisterRegisterAuthRegisterPostMutationKey();
  const swrFn =
    getRegisterRegisterAuthRegisterPostMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Reset:Forgot Password
 */
export type resetForgotPasswordAuthForgotPasswordPostResponse202 = {
  data: unknown;
  status: 202;
};

export type resetForgotPasswordAuthForgotPasswordPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type resetForgotPasswordAuthForgotPasswordPostResponseComposite =
  | resetForgotPasswordAuthForgotPasswordPostResponse202
  | resetForgotPasswordAuthForgotPasswordPostResponse422;

export type resetForgotPasswordAuthForgotPasswordPostResponse =
  resetForgotPasswordAuthForgotPasswordPostResponseComposite & {
    headers: Headers;
  };

export const getResetForgotPasswordAuthForgotPasswordPostUrl = () => {
  return "https://knowde.onrender.com/auth/forgot-password";
};

export const resetForgotPasswordAuthForgotPasswordPost = async (
  bodyResetForgotPasswordAuthForgotPasswordPost: BodyResetForgotPasswordAuthForgotPasswordPost,
  options?: RequestInit,
): Promise<resetForgotPasswordAuthForgotPasswordPostResponse> => {
  const res = await fetch(getResetForgotPasswordAuthForgotPasswordPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(bodyResetForgotPasswordAuthForgotPasswordPost),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: resetForgotPasswordAuthForgotPasswordPostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as resetForgotPasswordAuthForgotPasswordPostResponse;
};

export const getResetForgotPasswordAuthForgotPasswordPostMutationFetcher = (
  options?: RequestInit,
) => {
  return (
    _: Key,
    { arg }: { arg: BodyResetForgotPasswordAuthForgotPasswordPost },
  ): Promise<resetForgotPasswordAuthForgotPasswordPostResponse> => {
    return resetForgotPasswordAuthForgotPasswordPost(arg, options);
  };
};
export const getResetForgotPasswordAuthForgotPasswordPostMutationKey = () =>
  ["https://knowde.onrender.com/auth/forgot-password"] as const;

export type ResetForgotPasswordAuthForgotPasswordPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof resetForgotPasswordAuthForgotPasswordPost>>
  >;
export type ResetForgotPasswordAuthForgotPasswordPostMutationError =
  Promise<HTTPValidationError>;

/**
 * @summary Reset:Forgot Password
 */
export const useResetForgotPasswordAuthForgotPasswordPost = <
  TError = Promise<HTTPValidationError>,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof resetForgotPasswordAuthForgotPasswordPost>>,
    TError,
    Key,
    BodyResetForgotPasswordAuthForgotPasswordPost,
    Awaited<ReturnType<typeof resetForgotPasswordAuthForgotPasswordPost>>
  > & { swrKey?: string };
  fetch?: RequestInit;
}) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ??
    getResetForgotPasswordAuthForgotPasswordPostMutationKey();
  const swrFn =
    getResetForgotPasswordAuthForgotPasswordPostMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Reset:Reset Password
 */
export type resetResetPasswordAuthResetPasswordPostResponse200 = {
  data: unknown;
  status: 200;
};

export type resetResetPasswordAuthResetPasswordPostResponse400 = {
  data: ErrorModel;
  status: 400;
};

export type resetResetPasswordAuthResetPasswordPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type resetResetPasswordAuthResetPasswordPostResponseComposite =
  | resetResetPasswordAuthResetPasswordPostResponse200
  | resetResetPasswordAuthResetPasswordPostResponse400
  | resetResetPasswordAuthResetPasswordPostResponse422;

export type resetResetPasswordAuthResetPasswordPostResponse =
  resetResetPasswordAuthResetPasswordPostResponseComposite & {
    headers: Headers;
  };

export const getResetResetPasswordAuthResetPasswordPostUrl = () => {
  return "https://knowde.onrender.com/auth/reset-password";
};

export const resetResetPasswordAuthResetPasswordPost = async (
  bodyResetResetPasswordAuthResetPasswordPost: BodyResetResetPasswordAuthResetPasswordPost,
  options?: RequestInit,
): Promise<resetResetPasswordAuthResetPasswordPostResponse> => {
  const res = await fetch(getResetResetPasswordAuthResetPasswordPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(bodyResetResetPasswordAuthResetPasswordPost),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: resetResetPasswordAuthResetPasswordPostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as resetResetPasswordAuthResetPasswordPostResponse;
};

export const getResetResetPasswordAuthResetPasswordPostMutationFetcher = (
  options?: RequestInit,
) => {
  return (
    _: Key,
    { arg }: { arg: BodyResetResetPasswordAuthResetPasswordPost },
  ): Promise<resetResetPasswordAuthResetPasswordPostResponse> => {
    return resetResetPasswordAuthResetPasswordPost(arg, options);
  };
};
export const getResetResetPasswordAuthResetPasswordPostMutationKey = () =>
  ["https://knowde.onrender.com/auth/reset-password"] as const;

export type ResetResetPasswordAuthResetPasswordPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof resetResetPasswordAuthResetPasswordPost>>
>;
export type ResetResetPasswordAuthResetPasswordPostMutationError = Promise<
  ErrorModel | HTTPValidationError
>;

/**
 * @summary Reset:Reset Password
 */
export const useResetResetPasswordAuthResetPasswordPost = <
  TError = Promise<ErrorModel | HTTPValidationError>,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof resetResetPasswordAuthResetPasswordPost>>,
    TError,
    Key,
    BodyResetResetPasswordAuthResetPasswordPost,
    Awaited<ReturnType<typeof resetResetPasswordAuthResetPasswordPost>>
  > & { swrKey?: string };
  fetch?: RequestInit;
}) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ??
    getResetResetPasswordAuthResetPasswordPostMutationKey();
  const swrFn =
    getResetResetPasswordAuthResetPasswordPostMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Verify:Request-Token
 */
export type verifyRequestTokenAuthRequestVerifyTokenPostResponse202 = {
  data: unknown;
  status: 202;
};

export type verifyRequestTokenAuthRequestVerifyTokenPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type verifyRequestTokenAuthRequestVerifyTokenPostResponseComposite =
  | verifyRequestTokenAuthRequestVerifyTokenPostResponse202
  | verifyRequestTokenAuthRequestVerifyTokenPostResponse422;

export type verifyRequestTokenAuthRequestVerifyTokenPostResponse =
  verifyRequestTokenAuthRequestVerifyTokenPostResponseComposite & {
    headers: Headers;
  };

export const getVerifyRequestTokenAuthRequestVerifyTokenPostUrl = () => {
  return "https://knowde.onrender.com/auth/request-verify-token";
};

export const verifyRequestTokenAuthRequestVerifyTokenPost = async (
  bodyVerifyRequestTokenAuthRequestVerifyTokenPost: BodyVerifyRequestTokenAuthRequestVerifyTokenPost,
  options?: RequestInit,
): Promise<verifyRequestTokenAuthRequestVerifyTokenPostResponse> => {
  const res = await fetch(
    getVerifyRequestTokenAuthRequestVerifyTokenPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(bodyVerifyRequestTokenAuthRequestVerifyTokenPost),
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: verifyRequestTokenAuthRequestVerifyTokenPostResponse["data"] =
    body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as verifyRequestTokenAuthRequestVerifyTokenPostResponse;
};

export const getVerifyRequestTokenAuthRequestVerifyTokenPostMutationFetcher = (
  options?: RequestInit,
) => {
  return (
    _: Key,
    { arg }: { arg: BodyVerifyRequestTokenAuthRequestVerifyTokenPost },
  ): Promise<verifyRequestTokenAuthRequestVerifyTokenPostResponse> => {
    return verifyRequestTokenAuthRequestVerifyTokenPost(arg, options);
  };
};
export const getVerifyRequestTokenAuthRequestVerifyTokenPostMutationKey = () =>
  ["https://knowde.onrender.com/auth/request-verify-token"] as const;

export type VerifyRequestTokenAuthRequestVerifyTokenPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof verifyRequestTokenAuthRequestVerifyTokenPost>>
  >;
export type VerifyRequestTokenAuthRequestVerifyTokenPostMutationError =
  Promise<HTTPValidationError>;

/**
 * @summary Verify:Request-Token
 */
export const useVerifyRequestTokenAuthRequestVerifyTokenPost = <
  TError = Promise<HTTPValidationError>,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof verifyRequestTokenAuthRequestVerifyTokenPost>>,
    TError,
    Key,
    BodyVerifyRequestTokenAuthRequestVerifyTokenPost,
    Awaited<ReturnType<typeof verifyRequestTokenAuthRequestVerifyTokenPost>>
  > & { swrKey?: string };
  fetch?: RequestInit;
}) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ??
    getVerifyRequestTokenAuthRequestVerifyTokenPostMutationKey();
  const swrFn =
    getVerifyRequestTokenAuthRequestVerifyTokenPostMutationFetcher(
      fetchOptions,
    );

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Verify:Verify
 */
export type verifyVerifyAuthVerifyPostResponse200 = {
  data: UserRead;
  status: 200;
};

export type verifyVerifyAuthVerifyPostResponse400 = {
  data: ErrorModel;
  status: 400;
};

export type verifyVerifyAuthVerifyPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type verifyVerifyAuthVerifyPostResponseComposite =
  | verifyVerifyAuthVerifyPostResponse200
  | verifyVerifyAuthVerifyPostResponse400
  | verifyVerifyAuthVerifyPostResponse422;

export type verifyVerifyAuthVerifyPostResponse =
  verifyVerifyAuthVerifyPostResponseComposite & {
    headers: Headers;
  };

export const getVerifyVerifyAuthVerifyPostUrl = () => {
  return "https://knowde.onrender.com/auth/verify";
};

export const verifyVerifyAuthVerifyPost = async (
  bodyVerifyVerifyAuthVerifyPost: BodyVerifyVerifyAuthVerifyPost,
  options?: RequestInit,
): Promise<verifyVerifyAuthVerifyPostResponse> => {
  const res = await fetch(getVerifyVerifyAuthVerifyPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(bodyVerifyVerifyAuthVerifyPost),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: verifyVerifyAuthVerifyPostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as verifyVerifyAuthVerifyPostResponse;
};

export const getVerifyVerifyAuthVerifyPostMutationFetcher = (
  options?: RequestInit,
) => {
  return (
    _: Key,
    { arg }: { arg: BodyVerifyVerifyAuthVerifyPost },
  ): Promise<verifyVerifyAuthVerifyPostResponse> => {
    return verifyVerifyAuthVerifyPost(arg, options);
  };
};
export const getVerifyVerifyAuthVerifyPostMutationKey = () =>
  ["https://knowde.onrender.com/auth/verify"] as const;

export type VerifyVerifyAuthVerifyPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof verifyVerifyAuthVerifyPost>>
>;
export type VerifyVerifyAuthVerifyPostMutationError = Promise<
  ErrorModel | HTTPValidationError
>;

/**
 * @summary Verify:Verify
 */
export const useVerifyVerifyAuthVerifyPost = <
  TError = Promise<ErrorModel | HTTPValidationError>,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof verifyVerifyAuthVerifyPost>>,
    TError,
    Key,
    BodyVerifyVerifyAuthVerifyPost,
    Awaited<ReturnType<typeof verifyVerifyAuthVerifyPost>>
  > & { swrKey?: string };
  fetch?: RequestInit;
}) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getVerifyVerifyAuthVerifyPostMutationKey();
  const swrFn = getVerifyVerifyAuthVerifyPostMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
/**
 * @summary Oauth:Google.Jwt.Authorize
 */
export type oauthGoogleJwtAuthorizeGoogleAuthorizeGetResponse200 = {
  data: OAuth2AuthorizeResponse;
  status: 200;
};

export type oauthGoogleJwtAuthorizeGoogleAuthorizeGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type oauthGoogleJwtAuthorizeGoogleAuthorizeGetResponseComposite =
  | oauthGoogleJwtAuthorizeGoogleAuthorizeGetResponse200
  | oauthGoogleJwtAuthorizeGoogleAuthorizeGetResponse422;

export type oauthGoogleJwtAuthorizeGoogleAuthorizeGetResponse =
  oauthGoogleJwtAuthorizeGoogleAuthorizeGetResponseComposite & {
    headers: Headers;
  };

export const getOauthGoogleJwtAuthorizeGoogleAuthorizeGetUrl = (
  params?: OauthGoogleJwtAuthorizeGoogleAuthorizeGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://knowde.onrender.com/google/authorize?${stringifiedParams}`
    : "https://knowde.onrender.com/google/authorize";
};

export const oauthGoogleJwtAuthorizeGoogleAuthorizeGet = async (
  params?: OauthGoogleJwtAuthorizeGoogleAuthorizeGetParams,
  options?: RequestInit,
): Promise<oauthGoogleJwtAuthorizeGoogleAuthorizeGetResponse> => {
  const res = await fetch(
    getOauthGoogleJwtAuthorizeGoogleAuthorizeGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: oauthGoogleJwtAuthorizeGoogleAuthorizeGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as oauthGoogleJwtAuthorizeGoogleAuthorizeGetResponse;
};

export const getOauthGoogleJwtAuthorizeGoogleAuthorizeGetKey = (
  params?: OauthGoogleJwtAuthorizeGoogleAuthorizeGetParams,
) =>
  [
    "https://knowde.onrender.com/google/authorize",
    ...(params ? [params] : []),
  ] as const;

export type OauthGoogleJwtAuthorizeGoogleAuthorizeGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthGoogleJwtAuthorizeGoogleAuthorizeGet>>
>;
export type OauthGoogleJwtAuthorizeGoogleAuthorizeGetQueryError =
  Promise<HTTPValidationError>;

/**
 * @summary Oauth:Google.Jwt.Authorize
 */
export const useOauthGoogleJwtAuthorizeGoogleAuthorizeGet = <
  TError = Promise<HTTPValidationError>,
>(
  params?: OauthGoogleJwtAuthorizeGoogleAuthorizeGetParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof oauthGoogleJwtAuthorizeGoogleAuthorizeGet>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    fetch?: RequestInit;
  },
) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getOauthGoogleJwtAuthorizeGoogleAuthorizeGetKey(params)
        : null);
  const swrFn = () =>
    oauthGoogleJwtAuthorizeGoogleAuthorizeGet(params, fetchOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * The response varies based on the authentication backend used.
 * @summary Oauth:Google.Jwt.Callback
 */
export type oauthGoogleJwtCallbackGoogleCallbackGetResponse200 = {
  data: unknown;
  status: 200;
};

export type oauthGoogleJwtCallbackGoogleCallbackGetResponse400 = {
  data: ErrorModel;
  status: 400;
};

export type oauthGoogleJwtCallbackGoogleCallbackGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type oauthGoogleJwtCallbackGoogleCallbackGetResponseComposite =
  | oauthGoogleJwtCallbackGoogleCallbackGetResponse200
  | oauthGoogleJwtCallbackGoogleCallbackGetResponse400
  | oauthGoogleJwtCallbackGoogleCallbackGetResponse422;

export type oauthGoogleJwtCallbackGoogleCallbackGetResponse =
  oauthGoogleJwtCallbackGoogleCallbackGetResponseComposite & {
    headers: Headers;
  };

export const getOauthGoogleJwtCallbackGoogleCallbackGetUrl = (
  params?: OauthGoogleJwtCallbackGoogleCallbackGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://knowde.onrender.com/google/callback?${stringifiedParams}`
    : "https://knowde.onrender.com/google/callback";
};

export const oauthGoogleJwtCallbackGoogleCallbackGet = async (
  params?: OauthGoogleJwtCallbackGoogleCallbackGetParams,
  options?: RequestInit,
): Promise<oauthGoogleJwtCallbackGoogleCallbackGetResponse> => {
  const res = await fetch(
    getOauthGoogleJwtCallbackGoogleCallbackGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: oauthGoogleJwtCallbackGoogleCallbackGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as oauthGoogleJwtCallbackGoogleCallbackGetResponse;
};

export const getOauthGoogleJwtCallbackGoogleCallbackGetKey = (
  params?: OauthGoogleJwtCallbackGoogleCallbackGetParams,
) =>
  [
    "https://knowde.onrender.com/google/callback",
    ...(params ? [params] : []),
  ] as const;

export type OauthGoogleJwtCallbackGoogleCallbackGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof oauthGoogleJwtCallbackGoogleCallbackGet>>
>;
export type OauthGoogleJwtCallbackGoogleCallbackGetQueryError = Promise<
  ErrorModel | HTTPValidationError
>;

/**
 * @summary Oauth:Google.Jwt.Callback
 */
export const useOauthGoogleJwtCallbackGoogleCallbackGet = <
  TError = Promise<ErrorModel | HTTPValidationError>,
>(
  params?: OauthGoogleJwtCallbackGoogleCallbackGetParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof oauthGoogleJwtCallbackGoogleCallbackGet>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    fetch?: RequestInit;
  },
) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled ? getOauthGoogleJwtCallbackGoogleCallbackGetKey(params) : null);
  const swrFn = () =>
    oauthGoogleJwtCallbackGoogleCallbackGet(params, fetchOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
