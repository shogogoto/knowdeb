/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type { UserRead } from "../fastAPI.schemas";

export const getUsersCurrentUserUserMeGetResponseMock = (
  overrideResponse: Partial<UserRead> = {},
): UserRead => ({
  id: faker.string.uuid(),
  email: faker.internet.email(),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  is_superuser: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  is_verified: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUsersPatchCurrentUserUserMePatchResponseMock = (
  overrideResponse: Partial<UserRead> = {},
): UserRead => ({
  id: faker.string.uuid(),
  email: faker.internet.email(),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  is_superuser: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  is_verified: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUsersUserUserIdGetResponseMock = (
  overrideResponse: Partial<UserRead> = {},
): UserRead => ({
  id: faker.string.uuid(),
  email: faker.internet.email(),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  is_superuser: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  is_verified: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUsersPatchUserUserIdPatchResponseMock = (
  overrideResponse: Partial<UserRead> = {},
): UserRead => ({
  id: faker.string.uuid(),
  email: faker.internet.email(),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  is_superuser: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  is_verified: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUsersCurrentUserUserMeGetMockHandler = (
  overrideResponse?:
    | UserRead
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserRead> | UserRead),
) => {
  return http.get("*/user/me", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUsersCurrentUserUserMeGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUsersPatchCurrentUserUserMePatchMockHandler = (
  overrideResponse?:
    | UserRead
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UserRead> | UserRead),
) => {
  return http.patch("*/user/me", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUsersPatchCurrentUserUserMePatchResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUsersUserUserIdGetMockHandler = (
  overrideResponse?:
    | UserRead
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserRead> | UserRead),
) => {
  return http.get("*/user/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUsersUserUserIdGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUsersPatchUserUserIdPatchMockHandler = (
  overrideResponse?:
    | UserRead
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UserRead> | UserRead),
) => {
  return http.patch("*/user/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUsersPatchUserUserIdPatchResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUsersDeleteUserUserIdDeleteMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/user/:id", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};
export const getUserMock = () => [
  getUsersCurrentUserUserMeGetMockHandler(),
  getUsersPatchCurrentUserUserMePatchMockHandler(),
  getUsersUserUserIdGetMockHandler(),
  getUsersPatchUserUserIdPatchMockHandler(),
  getUsersDeleteUserUserIdDeleteMockHandler(),
];
