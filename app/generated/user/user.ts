/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import type {
  ErrorModel,
  HTTPValidationError,
  UserRead,
  UserUpdate,
} from "../fastAPI.schemas";

/**
 * @summary Users:Current User
 */
export type usersCurrentUserUserMeGetResponse200 = {
  data: UserRead;
  status: 200;
};

export type usersCurrentUserUserMeGetResponse401 = {
  data: undefined;
  status: 401;
};

export type usersCurrentUserUserMeGetResponseComposite =
  | usersCurrentUserUserMeGetResponse200
  | usersCurrentUserUserMeGetResponse401;

export type usersCurrentUserUserMeGetResponse =
  usersCurrentUserUserMeGetResponseComposite & {
    headers: Headers;
  };

export const getUsersCurrentUserUserMeGetUrl = () => {
  return "https://knowde.onrender.com/user/me";
};

export const usersCurrentUserUserMeGet = async (
  options?: RequestInit,
): Promise<usersCurrentUserUserMeGetResponse> => {
  const res = await fetch(getUsersCurrentUserUserMeGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersCurrentUserUserMeGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersCurrentUserUserMeGetResponse;
};

/**
 * @summary Users:Patch Current User
 */
export type usersPatchCurrentUserUserMePatchResponse200 = {
  data: UserRead;
  status: 200;
};

export type usersPatchCurrentUserUserMePatchResponse400 = {
  data: ErrorModel;
  status: 400;
};

export type usersPatchCurrentUserUserMePatchResponse401 = {
  data: undefined;
  status: 401;
};

export type usersPatchCurrentUserUserMePatchResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type usersPatchCurrentUserUserMePatchResponseComposite =
  | usersPatchCurrentUserUserMePatchResponse200
  | usersPatchCurrentUserUserMePatchResponse400
  | usersPatchCurrentUserUserMePatchResponse401
  | usersPatchCurrentUserUserMePatchResponse422;

export type usersPatchCurrentUserUserMePatchResponse =
  usersPatchCurrentUserUserMePatchResponseComposite & {
    headers: Headers;
  };

export const getUsersPatchCurrentUserUserMePatchUrl = () => {
  return "https://knowde.onrender.com/user/me";
};

export const usersPatchCurrentUserUserMePatch = async (
  userUpdate: UserUpdate,
  options?: RequestInit,
): Promise<usersPatchCurrentUserUserMePatchResponse> => {
  const res = await fetch(getUsersPatchCurrentUserUserMePatchUrl(), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userUpdate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersPatchCurrentUserUserMePatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersPatchCurrentUserUserMePatchResponse;
};

/**
 * @summary Users:User
 */
export type usersUserUserIdGetResponse200 = {
  data: UserRead;
  status: 200;
};

export type usersUserUserIdGetResponse401 = {
  data: undefined;
  status: 401;
};

export type usersUserUserIdGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type usersUserUserIdGetResponseComposite =
  | usersUserUserIdGetResponse200
  | usersUserUserIdGetResponse401
  | usersUserUserIdGetResponse422;

export type usersUserUserIdGetResponse = usersUserUserIdGetResponseComposite & {
  headers: Headers;
};

export const getUsersUserUserIdGetUrl = (id: string) => {
  return `https://knowde.onrender.com/user/${id}`;
};

export const usersUserUserIdGet = async (
  id: string,
  options?: RequestInit,
): Promise<usersUserUserIdGetResponse> => {
  const res = await fetch(getUsersUserUserIdGetUrl(id), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersUserUserIdGetResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersUserUserIdGetResponse;
};

/**
 * @summary Users:Patch User
 */
export type usersPatchUserUserIdPatchResponse200 = {
  data: UserRead;
  status: 200;
};

export type usersPatchUserUserIdPatchResponse400 = {
  data: ErrorModel;
  status: 400;
};

export type usersPatchUserUserIdPatchResponse401 = {
  data: undefined;
  status: 401;
};

export type usersPatchUserUserIdPatchResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type usersPatchUserUserIdPatchResponseComposite =
  | usersPatchUserUserIdPatchResponse200
  | usersPatchUserUserIdPatchResponse400
  | usersPatchUserUserIdPatchResponse401
  | usersPatchUserUserIdPatchResponse422;

export type usersPatchUserUserIdPatchResponse =
  usersPatchUserUserIdPatchResponseComposite & {
    headers: Headers;
  };

export const getUsersPatchUserUserIdPatchUrl = (id: string) => {
  return `https://knowde.onrender.com/user/${id}`;
};

export const usersPatchUserUserIdPatch = async (
  id: string,
  userUpdate: UserUpdate,
  options?: RequestInit,
): Promise<usersPatchUserUserIdPatchResponse> => {
  const res = await fetch(getUsersPatchUserUserIdPatchUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userUpdate),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersPatchUserUserIdPatchResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersPatchUserUserIdPatchResponse;
};

/**
 * @summary Users:Delete User
 */
export type usersDeleteUserUserIdDeleteResponse204 = {
  data: undefined;
  status: 204;
};

export type usersDeleteUserUserIdDeleteResponse401 = {
  data: undefined;
  status: 401;
};

export type usersDeleteUserUserIdDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type usersDeleteUserUserIdDeleteResponseComposite =
  | usersDeleteUserUserIdDeleteResponse204
  | usersDeleteUserUserIdDeleteResponse401
  | usersDeleteUserUserIdDeleteResponse422;

export type usersDeleteUserUserIdDeleteResponse =
  usersDeleteUserUserIdDeleteResponseComposite & {
    headers: Headers;
  };

export const getUsersDeleteUserUserIdDeleteUrl = (id: string) => {
  return `https://knowde.onrender.com/user/${id}`;
};

export const usersDeleteUserUserIdDelete = async (
  id: string,
  options?: RequestInit,
): Promise<usersDeleteUserUserIdDeleteResponse> => {
  const res = await fetch(getUsersDeleteUserUserIdDeleteUrl(id), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: usersDeleteUserUserIdDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as usersDeleteUserUserIdDeleteResponse;
};
