/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type { OAuth2AuthorizeResponse } from "../fastAPI.schemas";

export const getOauthGoogleJwtAuthorizeGoogleAuthorizeGetResponseMock = (
  overrideResponse: Partial<OAuth2AuthorizeResponse> = {},
): OAuth2AuthorizeResponse => ({
  authorization_url: faker.string.alpha(20),
  ...overrideResponse,
});

export const getOauthGoogleCookieAuthorizeGoogleCookieAuthorizeGetResponseMock =
  (
    overrideResponse: Partial<OAuth2AuthorizeResponse> = {},
  ): OAuth2AuthorizeResponse => ({
    authorization_url: faker.string.alpha(20),
    ...overrideResponse,
  });

export const getOauthGoogleJwtAuthorizeGoogleAuthorizeGetMockHandler = (
  overrideResponse?:
    | OAuth2AuthorizeResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<OAuth2AuthorizeResponse> | OAuth2AuthorizeResponse),
) => {
  return http.get("*/google/authorize", async (info) => {
    await delay(200);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getOauthGoogleJwtAuthorizeGoogleAuthorizeGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getOauthGoogleJwtCallbackGoogleCallbackGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/google/callback", async (info) => {
    await delay(200);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getOauthGoogleCookieAuthorizeGoogleCookieAuthorizeGetMockHandler =
  (
    overrideResponse?:
      | OAuth2AuthorizeResponse
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => Promise<OAuth2AuthorizeResponse> | OAuth2AuthorizeResponse),
  ) => {
    return http.get("*/google/cookie/authorize", async (info) => {
      await delay(200);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getOauthGoogleCookieAuthorizeGoogleCookieAuthorizeGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    });
  };

export const getOauthGoogleCookieCallbackGoogleCookieCallbackGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/google/cookie/callback", async (info) => {
    await delay(200);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getGoogleMock = () => [
  getOauthGoogleJwtAuthorizeGoogleAuthorizeGetMockHandler(),
  getOauthGoogleJwtCallbackGoogleCallbackGetMockHandler(),
  getOauthGoogleCookieAuthorizeGoogleCookieAuthorizeGetMockHandler(),
  getOauthGoogleCookieCallbackGoogleCookieCallbackGetMockHandler(),
];
