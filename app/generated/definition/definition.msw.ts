/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type {
  Definition,
  DetailView,
  StatsDefinitions,
} from "../fastAPI.schemas";

export const getListDefinitionsDefinitionGetResponseMock = (
  overrideResponse: Partial<StatsDefinitions> = {},
): StatsDefinitions => ({
  values: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      definition: {
        uid: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.uuid(), null]),
          undefined,
        ]),
        created: `${faker.date.past().toISOString().split(".")[0]}Z`,
        updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
        term: {
          uid: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
          ]),
          created: `${faker.date.past().toISOString().split(".")[0]}Z`,
          updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
          value: faker.string.alpha(20),
        },
        sentence: {
          uid: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
          ]),
          created: `${faker.date.past().toISOString().split(".")[0]}Z`,
          updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
          value: faker.string.alpha(20),
        },
        deps: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            uid: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.uuid(), null]),
              undefined,
            ]),
            created: `${faker.date.past().toISOString().split(".")[0]}Z`,
            updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
            value: faker.string.alpha(20),
          })),
          undefined,
        ]),
      },
      statistics: {
        n_src: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        n_dest: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        max_root_dist: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        max_leaf_dist: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
      },
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getAddDefinitionDefinitionPostResponseMock = (
  overrideResponse: Partial<Definition> = {},
): Definition => ({
  uid: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  term: {
    uid: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    value: faker.string.alpha(20),
  },
  sentence: {
    uid: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    value: faker.string.alpha(20),
  },
  deps: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      uid: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
      ]),
      created: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
      value: faker.string.alpha(20),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCompleteDefinitionDefinitionCompletionGetResponseMock = (
  overrideResponse: Partial<Definition> = {},
): Definition => ({
  uid: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.uuid(), null]),
    undefined,
  ]),
  created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  term: {
    uid: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    value: faker.string.alpha(20),
  },
  sentence: {
    uid: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.uuid(), null]),
      undefined,
    ]),
    created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    value: faker.string.alpha(20),
  },
  deps: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      uid: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.uuid(), null]),
        undefined,
      ]),
      created: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
      value: faker.string.alpha(20),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDetailServiceDefinitionDefUidGetResponseMock = (
  overrideResponse: Partial<DetailView> = {},
): DetailView => ({
  detail: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        parent: {
          uid: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.uuid(), null]),
            undefined,
          ]),
          created: `${faker.date.past().toISOString().split(".")[0]}Z`,
          updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
          term: {
            uid: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.uuid(), null]),
              undefined,
            ]),
            created: `${faker.date.past().toISOString().split(".")[0]}Z`,
            updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
            value: faker.string.alpha(20),
          },
          sentence: {
            uid: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.uuid(), null]),
              undefined,
            ]),
            created: `${faker.date.past().toISOString().split(".")[0]}Z`,
            updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
            value: faker.string.alpha(20),
          },
          deps: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 1, max: 10 }) },
              (_, i) => i + 1,
            ).map(() => ({
              uid: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.uuid(), null]),
                undefined,
              ]),
              created: `${faker.date.past().toISOString().split(".")[0]}Z`,
              updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
              value: faker.string.alpha(20),
            })),
            undefined,
          ]),
        },
        children: faker.helpers.arrayElement([[], undefined]),
      },
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListDefinitionsDefinitionGetMockHandler = (
  overrideResponse?:
    | StatsDefinitions
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StatsDefinitions> | StatsDefinitions),
) => {
  return http.get("*/definition", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListDefinitionsDefinitionGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAddDefinitionDefinitionPostMockHandler = (
  overrideResponse?:
    | Definition
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Definition> | Definition),
) => {
  return http.post("*/definition", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAddDefinitionDefinitionPostResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCompleteDefinitionDefinitionCompletionGetMockHandler = (
  overrideResponse?:
    | Definition
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Definition> | Definition),
) => {
  return http.get("*/definition/completion", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCompleteDefinitionDefinitionCompletionGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDetailServiceDefinitionDefUidGetMockHandler = (
  overrideResponse?:
    | DetailView
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<DetailView> | DetailView),
) => {
  return http.get("*/definition/:defUid", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDetailServiceDefinitionDefUidGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getRemoveDefinitionDefinitionDefUidDeleteMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/definition/:defUid", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};
export const getDefinitionMock = () => [
  getListDefinitionsDefinitionGetMockHandler(),
  getAddDefinitionDefinitionPostMockHandler(),
  getCompleteDefinitionDefinitionCompletionGetMockHandler(),
  getDetailServiceDefinitionDefUidGetMockHandler(),
  getRemoveDefinitionDefinitionDefUidDeleteMockHandler(),
];
