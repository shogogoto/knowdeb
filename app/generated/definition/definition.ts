/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import type {
  CompleteDefinitionDefinitionCompletionGetParams,
  Definition,
  DefinitionParam,
  DetailView,
  HTTPValidationError,
  StatsDefinitions,
} from "../fastAPI.schemas";

/**
 * とりあえず一覧を返す.

本当は依存関係の統計値も返したいが、開発が進んでから再検討しよう
 * @summary List Definitions
 */
export type listDefinitionsDefinitionGetResponse200 = {
  data: StatsDefinitions;
  status: 200;
};

export type listDefinitionsDefinitionGetResponseComposite =
  listDefinitionsDefinitionGetResponse200;

export type listDefinitionsDefinitionGetResponse =
  listDefinitionsDefinitionGetResponseComposite & {
    headers: Headers;
  };

export const getListDefinitionsDefinitionGetUrl = () => {
  return "http://localhost:8000/definition";
};

export const listDefinitionsDefinitionGet = async (
  options?: RequestInit,
): Promise<listDefinitionsDefinitionGetResponse> => {
  const res = await fetch(getListDefinitionsDefinitionGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: listDefinitionsDefinitionGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as listDefinitionsDefinitionGetResponse;
};

/**
 * @summary Add Definition
 */
export type addDefinitionDefinitionPostResponse201 = {
  data: Definition;
  status: 201;
};

export type addDefinitionDefinitionPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type addDefinitionDefinitionPostResponseComposite =
  | addDefinitionDefinitionPostResponse201
  | addDefinitionDefinitionPostResponse422;

export type addDefinitionDefinitionPostResponse =
  addDefinitionDefinitionPostResponseComposite & {
    headers: Headers;
  };

export const getAddDefinitionDefinitionPostUrl = () => {
  return "http://localhost:8000/definition";
};

export const addDefinitionDefinitionPost = async (
  definitionParam: DefinitionParam,
  options?: RequestInit,
): Promise<addDefinitionDefinitionPostResponse> => {
  const res = await fetch(getAddDefinitionDefinitionPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(definitionParam),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: addDefinitionDefinitionPostResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as addDefinitionDefinitionPostResponse;
};

/**
 * 前方一致検索.
 * @summary Complete Definition
 */
export type completeDefinitionDefinitionCompletionGetResponse200 = {
  data: Definition;
  status: 200;
};

export type completeDefinitionDefinitionCompletionGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type completeDefinitionDefinitionCompletionGetResponseComposite =
  | completeDefinitionDefinitionCompletionGetResponse200
  | completeDefinitionDefinitionCompletionGetResponse422;

export type completeDefinitionDefinitionCompletionGetResponse =
  completeDefinitionDefinitionCompletionGetResponseComposite & {
    headers: Headers;
  };

export const getCompleteDefinitionDefinitionCompletionGetUrl = (
  params: CompleteDefinitionDefinitionCompletionGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8000/definition/completion?${stringifiedParams}`
    : "http://localhost:8000/definition/completion";
};

export const completeDefinitionDefinitionCompletionGet = async (
  params: CompleteDefinitionDefinitionCompletionGetParams,
  options?: RequestInit,
): Promise<completeDefinitionDefinitionCompletionGetResponse> => {
  const res = await fetch(
    getCompleteDefinitionDefinitionCompletionGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: completeDefinitionDefinitionCompletionGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as completeDefinitionDefinitionCompletionGetResponse;
};

/**
 * 定義の詳細.
 * @summary Detail Service
 */
export type detailServiceDefinitionDefUidGetResponse200 = {
  data: DetailView;
  status: 200;
};

export type detailServiceDefinitionDefUidGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type detailServiceDefinitionDefUidGetResponseComposite =
  | detailServiceDefinitionDefUidGetResponse200
  | detailServiceDefinitionDefUidGetResponse422;

export type detailServiceDefinitionDefUidGetResponse =
  detailServiceDefinitionDefUidGetResponseComposite & {
    headers: Headers;
  };

export const getDetailServiceDefinitionDefUidGetUrl = (defUid: string) => {
  return `http://localhost:8000/definition/${defUid}`;
};

export const detailServiceDefinitionDefUidGet = async (
  defUid: string,
  options?: RequestInit,
): Promise<detailServiceDefinitionDefUidGetResponse> => {
  const res = await fetch(getDetailServiceDefinitionDefUidGetUrl(defUid), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: detailServiceDefinitionDefUidGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as detailServiceDefinitionDefUidGetResponse;
};

/**
 * 定義の削除.
 * @summary Remove Definition
 */
export type removeDefinitionDefinitionDefUidDeleteResponse204 = {
  data: undefined;
  status: 204;
};

export type removeDefinitionDefinitionDefUidDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type removeDefinitionDefinitionDefUidDeleteResponseComposite =
  | removeDefinitionDefinitionDefUidDeleteResponse204
  | removeDefinitionDefinitionDefUidDeleteResponse422;

export type removeDefinitionDefinitionDefUidDeleteResponse =
  removeDefinitionDefinitionDefUidDeleteResponseComposite & {
    headers: Headers;
  };

export const getRemoveDefinitionDefinitionDefUidDeleteUrl = (
  defUid: string,
) => {
  return `http://localhost:8000/definition/${defUid}`;
};

export const removeDefinitionDefinitionDefUidDelete = async (
  defUid: string,
  options?: RequestInit,
): Promise<removeDefinitionDefinitionDefUidDeleteResponse> => {
  const res = await fetch(
    getRemoveDefinitionDefinitionDefUidDeleteUrl(defUid),
    {
      ...options,
      method: "DELETE",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: removeDefinitionDefinitionDefUidDeleteResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as removeDefinitionDefinitionDefUidDeleteResponse;
};
