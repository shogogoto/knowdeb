/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type { ClerkWebhookWebhookClerkPost200 } from "../fastAPI.schemas";

export const getClerkWebhookWebhookClerkPostResponseMock =
  (): ClerkWebhookWebhookClerkPost200 =>
    faker.helpers.arrayElement([
      {
        uid: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.uuid(), null]),
          undefined,
        ]),
        email: faker.internet.email(),
        hashed_password: faker.string.alpha(20),
        is_active: faker.datatype.boolean(),
        is_superuser: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        is_verified: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        oauth_accounts: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            oauth_name: faker.string.alpha(20),
            access_token: faker.string.alpha(20),
            expires_at: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            refresh_token: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            account_id: faker.string.alpha(20),
            account_email: faker.internet.email(),
          })),
          undefined,
        ]),
        clerk_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined,
        ]),
        display_name: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined,
        ]),
      },
      null,
    ]);

export const getClerkWebhookWebhookClerkPostMockHandler = (
  overrideResponse?:
    | ClerkWebhookWebhookClerkPost200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ClerkWebhookWebhookClerkPost200>
        | ClerkWebhookWebhookClerkPost200),
) => {
  return http.post("*/webhook/clerk", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getClerkWebhookWebhookClerkPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getClerkMock = () => [
  getClerkWebhookWebhookClerkPostMockHandler(),
];
