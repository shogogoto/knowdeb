/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import useSwr from "swr";
import type { Key, SWRConfiguration } from "swr";

import type {
  HTTPValidationError,
  SearchUserUserSearchGetParams,
  UserProfileUserProfileUsernameGetParams,
  UserReadPublic,
} from "../fastAPI.schemas";

/**
 * 認証なしユーザー検索.
 * @summary Search User
 */
export type searchUserUserSearchGetResponse200 = {
  data: UserReadPublic[];
  status: 200;
};

export type searchUserUserSearchGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type searchUserUserSearchGetResponseComposite =
  | searchUserUserSearchGetResponse200
  | searchUserUserSearchGetResponse422;

export type searchUserUserSearchGetResponse =
  searchUserUserSearchGetResponseComposite & {
    headers: Headers;
  };

export const getSearchUserUserSearchGetUrl = (
  params?: SearchUserUserSearchGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://knowde.onrender.com/user/search?${stringifiedParams}`
    : "https://knowde.onrender.com/user/search";
};

export const searchUserUserSearchGet = async (
  params?: SearchUserUserSearchGetParams,
  options?: RequestInit,
): Promise<searchUserUserSearchGetResponse> => {
  const res = await fetch(getSearchUserUserSearchGetUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: searchUserUserSearchGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as searchUserUserSearchGetResponse;
};

export const getSearchUserUserSearchGetKey = (
  params?: SearchUserUserSearchGetParams,
) =>
  [
    "https://knowde.onrender.com/user/search",
    ...(params ? [params] : []),
  ] as const;

export type SearchUserUserSearchGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchUserUserSearchGet>>
>;
export type SearchUserUserSearchGetQueryError = Promise<HTTPValidationError>;

/**
 * @summary Search User
 */
export const useSearchUserUserSearchGet = <
  TError = Promise<HTTPValidationError>,
>(
  params?: SearchUserUserSearchGetParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof searchUserUserSearchGet>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    fetch?: RequestInit;
  },
) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getSearchUserUserSearchGetKey(params) : null));
  const swrFn = () => searchUserUserSearchGet(params, fetchOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
/**
 * 公開ユーザー情報.
 * @summary User Profile
 */
export type userProfileUserProfileUsernameGetResponse200 = {
  data: UserReadPublic;
  status: 200;
};

export type userProfileUserProfileUsernameGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type userProfileUserProfileUsernameGetResponseComposite =
  | userProfileUserProfileUsernameGetResponse200
  | userProfileUserProfileUsernameGetResponse422;

export type userProfileUserProfileUsernameGetResponse =
  userProfileUserProfileUsernameGetResponseComposite & {
    headers: Headers;
  };

export const getUserProfileUserProfileUsernameGetUrl = (
  username: string,
  params?: UserProfileUserProfileUsernameGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://knowde.onrender.com/user/profile/${username}?${stringifiedParams}`
    : `https://knowde.onrender.com/user/profile/${username}`;
};

export const userProfileUserProfileUsernameGet = async (
  username: string,
  params?: UserProfileUserProfileUsernameGetParams,
  options?: RequestInit,
): Promise<userProfileUserProfileUsernameGetResponse> => {
  const res = await fetch(
    getUserProfileUserProfileUsernameGetUrl(username, params),
    {
      ...options,
      method: "GET",
    },
  );

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: userProfileUserProfileUsernameGetResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as userProfileUserProfileUsernameGetResponse;
};

export const getUserProfileUserProfileUsernameGetKey = (
  username: string,
  params?: UserProfileUserProfileUsernameGetParams,
) =>
  [
    `https://knowde.onrender.com/user/profile/${username}`,
    ...(params ? [params] : []),
  ] as const;

export type UserProfileUserProfileUsernameGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof userProfileUserProfileUsernameGet>>
>;
export type UserProfileUserProfileUsernameGetQueryError =
  Promise<HTTPValidationError>;

/**
 * @summary User Profile
 */
export const useUserProfileUserProfileUsernameGet = <
  TError = Promise<HTTPValidationError>,
>(
  username: string,
  params?: UserProfileUserProfileUsernameGetParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof userProfileUserProfileUsernameGet>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    fetch?: RequestInit;
  },
) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!username;
  const swrKey =
    swrOptions?.swrKey ??
    (() =>
      isEnabled
        ? getUserProfileUserProfileUsernameGetKey(username, params)
        : null);
  const swrFn = () =>
    userProfileUserProfileUsernameGet(username, params, fetchOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
