/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type { UserReadPublic } from "../fastAPI.schemas";

export const getSearchUserUserSearchGetResponseMock = (): UserReadPublic[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    display_name: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined,
    ]),
    profile: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined,
    ]),
    avatar_url: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined,
    ]),
    username: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.helpers.fromRegExp("^[^-]*$"), null]),
      undefined,
    ]),
    uid: faker.string.uuid(),
    created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getUserProfileUserProfileUsernameGetResponseMock = (
  overrideResponse: Partial<UserReadPublic> = {},
): UserReadPublic => ({
  display_name: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  profile: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  avatar_url: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  username: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.helpers.fromRegExp("^[^-]*$"), null]),
    undefined,
  ]),
  uid: faker.string.uuid(),
  created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getSearchUserUserSearchGetMockHandler = (
  overrideResponse?:
    | UserReadPublic[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserReadPublic[]> | UserReadPublic[]),
) => {
  return http.get("*/user/search", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSearchUserUserSearchGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUserProfileUserProfileUsernameGetMockHandler = (
  overrideResponse?:
    | UserReadPublic
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserReadPublic> | UserReadPublic),
) => {
  return http.get("*/user/profile/:username", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUserProfileUserProfileUsernameGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getPublicUserMock = () => [
  getSearchUserUserSearchGetMockHandler(),
  getUserProfileUserProfileUsernameGetMockHandler(),
];
